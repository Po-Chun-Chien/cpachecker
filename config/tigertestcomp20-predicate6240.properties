# -------------------------CPA Options-------------------------

# ARGCPA is necessary for refinement and has to be the top-level CPA
cpa = cpa.arg.ARGCPA
ARGCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.multigoal.MultiGoalCPA,  cpa.automaton.ControlAutomatonCPA TerminatingFunctions, cpa.timeout.TimeoutCPA

TerminatingFunctions.cpa.automaton.inputFile = specification/test-comp-terminatingfunctions.spc


cpa.composite.aggregateBasicBlocks = false

cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops     = true



# Guessing predicates statically from the CFA is a heuristic that pays off.
cpa.predicate.refinement.performInitialStaticRefinement = true


# -------------------------Tiger Options-------------------------
tiger.checkCoverage = true
tiger.allCoveredGoalsPerTestCase = false
tiger.printLabels = true
tiger.timeout = 6240


# the file is in the standard config directory
tiger.algorithmConfigurationFile = tiger-internal-algorithm---pred-refiner.properties


# Use the Tiger Algorithm with Multigoal
analysis.algorithm.tiger = false
analysis.algorithm.tigerMultiGoal = true
tiger.goalReduction=NONE
tiger.useTestCompOutput = true
tiger.partitioning.partitionSize=25
tiger.partitioning.strategy=REVERSEDOMINATION
tiger.partitioning.partitionSizeDistribution=TOTAL

# -------------------------Traversal Options-------------------------
# reverse postorder (a more restrictive topological ordering) is better than dfs if elements may be merged
# callstack is necessary for ABE with blocks across function boundaries to work well
[analysis.traversal]
order = bfs
useReversePostorder = true
useCallstack = true
