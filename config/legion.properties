# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

#include includes/symbolicExecution.properties

analysis.useLegion = true
analysis.checkCounterexamples = false

legion.selectionStrategy = UNVISITED
legion.initialPasses = 3
legion.maxIterations = 5000
legion.maxSolverAsks = 5
legion.fuzzingMultiplier = 1
legion.emergencyFuzzingPasses = 5

cpa.value.merge = CONCOLIC
cpa.predicate.merge = SEP
cpa.value.unknownValueHandling = RANDOM_VALUE
cpa.value.concolic.handleArrays = true

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.value.ValueAnalysisCPA, cpa.predicate.PredicateCPA
# Needed cpas?
# cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA

# Remove block abstractions from predicate cpa
# as hindering when computing total path constraints
cpa.predicate.blk.alwaysAtFunctions = false
cpa.predicate.blk.alwaysAtLoops = false

# Deactivate invariant export: without block abstractions
# this would lead to error otherwise.
cpa.predicate.invariants.export = false
cpa.predicate.invariants.exportAsPrecision = false

# Necessary to iterate over all states
# to find set variables on testcase output
cpa.composite.aggregateBasicBlocks = false
