// This file is part of CPAchecker,
// a tool for configurable software verification:
// https://cpachecker.sosy-lab.org
//
// SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

package org.sosy_lab.cpachecker.cfa.ast.acsl;

import com.google.common.base.Charsets;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Multimap;
import com.google.common.io.Files;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Queue;
import java.util.Set;
import java.util.logging.Level;
import java.util.stream.Stream;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import org.sosy_lab.common.log.LogManager;
import org.sosy_lab.cpachecker.cfa.CFA;
import org.sosy_lab.cpachecker.cfa.CFAWithACSLAnnotations;
import org.sosy_lab.cpachecker.cfa.ast.FileLocation;
import org.sosy_lab.cpachecker.cfa.ast.acsl.util.Block;
import org.sosy_lab.cpachecker.cfa.ast.acsl.util.BlockStructure;
import org.sosy_lab.cpachecker.cfa.ast.acsl.util.BlockStructureBuilder;
import org.sosy_lab.cpachecker.cfa.ast.c.CFunctionDeclaration;
import org.sosy_lab.cpachecker.cfa.model.CFAEdge;
import org.sosy_lab.cpachecker.cfa.model.CFANode;
import org.sosy_lab.cpachecker.cfa.model.FunctionEntryNode;
import org.sosy_lab.cpachecker.cfa.model.FunctionExitNode;
import org.sosy_lab.cpachecker.cfa.model.c.CDeclarationEdge;
import org.sosy_lab.cpachecker.exceptions.CParserException;
import org.sosy_lab.cpachecker.util.CFATraversal;
import org.sosy_lab.cpachecker.util.CFATraversal.EdgeCollectingCFAVisitor;
import org.sosy_lab.cpachecker.util.LoopStructure;

parser code {:

    private static final int DEFAULT_STATEMENT_STACK_DEPTH = -1;

    private ACSLScanner scanner;
    private ACSLTermToCExpressionVisitor visitor;
    private final Set<Behavior> behaviors = new HashSet();
    // Maps binders to the set of logic expressions that are in their scope
    private final Map<Binder, Set<ACSLLogicExpression>> binders = new HashMap();
    private CFAWithACSLAnnotations cfa;
    private LogManager logger;
    private List<FileLocation> orderedLocs;
    private List<CFAEdge> orderedCFALocs;
    private List<FileLocation> commentPositions;
    private final Set<Integer> annotationsToSkip = new HashSet<>();

    private ACSLParser(
        ACSLScanner pScanner,
        SymbolFactory sf,
        CFAWithACSLAnnotations pCfa,
        List<FileLocation> pOrderedLocs,
        List<CFAEdge> pOrderedCFALocs,
        LogManager pLogger,
        List<FileLocation> pCommentPositions) {
      super(pScanner, sf);
      scanner = pScanner;
      cfa = pCfa;
      logger = pLogger;
      visitor = new ACSLTermToCExpressionVisitor(cfa, logger);
      orderedLocs = pOrderedLocs;
      orderedCFALocs = pOrderedCFALocs;
      commentPositions = pCommentPositions;
    }

    public static CFA parseACSLAnnotations(
        List<String> files,
        CFA pCfa,
        LogManager logger,
        List<FileLocation> commentPositions)
        throws CParserException, IOException {
      ComplexSymbolFactory sf = new ComplexSymbolFactory();
      Stream<FileLocation> orderedAnnotationLocs =
          commentPositions.stream()
              .sorted((loc1, loc2) -> Integer.compare(loc1.getNodeOffset(), loc2.getNodeOffset()));
      EdgeCollectingCFAVisitor edgeVisitor = new CFATraversal.EdgeCollectingCFAVisitor();
      CFATraversal.dfs().traverseOnce(pCfa.getMainFunction(), edgeVisitor);
      ImmutableList<CFAEdge> orderedCFALocs =
          edgeVisitor.getVisitedEdges().stream()
              .sorted(
                  (edge1, edge2) ->
                      Integer.compare(
                          edge1.getFileLocation().getNodeOffset(),
                          edge2.getFileLocation().getNodeOffset()))
              .collect(ImmutableList.toImmutableList());
      CFAWithACSLAnnotations newCFA = new CFAWithACSLAnnotations(pCfa);

      for (String filename : files) {
        Reader reader = new FileReader(new File(filename), StandardCharsets.UTF_8);
        ACSLScanner scanner = new ACSLScanner(reader);

      ImmutableList<FileLocation> orderedLocs =
          orderedAnnotationLocs
              .filter(
                  x ->
                      x.getFileName().equals(filename)
                          || Path.of(x.getFileName()).getFileName().toString().equals(filename))
              .collect(ImmutableList.toImmutableList());
        BlockStructureBuilder builder = new BlockStructureBuilder(pCfa);
        BlockStructure blockStructure = builder.build(filename);
        ACSLParser parser =
            new ACSLParser(
                scanner, sf, newCFA, orderedLocs, orderedCFALocs, logger, commentPositions);
        List<ACSLAnnotation> annotations = parser.parseACSLAnnotations();
        int skipped = 0;
        for (int i = 0; i < orderedLocs.size(); i++) {
          if (parser.shouldSkip(i)) {
            skipped++;
            continue;
          }
          if (annotations.get(i) instanceof ACSLAssertion) {
            handleAssertion(
                newCFA,
                orderedCFALocs,
                orderedLocs.get(i),
                (ACSLAssertion) annotations.get(i),
                blockStructure);
          } else {
            CFAEdge edgeForAnnotation = null;
            for (CFAEdge edge : orderedCFALocs) {
              if (edge.getFileLocation().getNodeOffset() > orderedLocs.get(i).getNodeOffset()) {
                edgeForAnnotation = edge;
                break;
              }
            }
            // Only assertions may be placed at the end of a file,
            // so there should be another edge after the current annotation
            assert edgeForAnnotation != null;
            newCFA.getEdgesToAnnotations().put(edgeForAnnotation, annotations.get(i));
          }
        }
        logger.log(Level.INFO, "Skipped " + skipped + " of " + annotations.size() + " annotations.");
        convertFunctionContractsIfNecessary(newCFA);
        adjustAnnotationLocations(newCFA, filename, blockStructure);
        // TODO: check whether used identifiers have been declared
        checkBehaviors(newCFA.getEdgesToAnnotations(), newCFA, blockStructure);
      }

      return newCFA;
    }

    private static void convertFunctionContractsIfNecessary(CFAWithACSLAnnotations cfaWithLocs) {
      ImmutableList<CFAEdge> keys =
          ImmutableList.copyOf(cfaWithLocs.getEdgesToAnnotations().keySet());
      for (CFAEdge edge : keys) {
        if (edge instanceof CDeclarationEdge
            && ((CDeclarationEdge) edge).getDeclaration() instanceof CFunctionDeclaration) {
          continue;
        }
        Collection<ACSLAnnotation> annotations =
            ImmutableList.copyOf(cfaWithLocs.getEdgesToAnnotations().get(edge));
        for (ACSLAnnotation annotation : annotations) {
          if (annotation instanceof FunctionContract) {
            StatementContract statementContract =
                StatementContract.fromFunctionContract(
                    ImmutableList.of(), (FunctionContract) annotation);
            cfaWithLocs.getEdgesToAnnotations().remove(edge, annotation);
            cfaWithLocs.getEdgesToAnnotations().put(edge, statementContract);
          }
        }
      }
    }

    /**
     * Add, move and remove ACSL annotations to, between and from CFAEdges as necessary to match their
     * semantics.
     *
     * @param cfaWithLocs A CFA holding the location information about the annotations.
     * @param currentFile Name of the file the annotations of which should be handled.
     */
    private static void adjustAnnotationLocations(
        CFAWithACSLAnnotations cfaWithLocs,
        String currentFile,
        BlockStructure blockStructure) {
      ImmutableList<CFAEdge> keys =
          ImmutableList.copyOf(cfaWithLocs.getEdgesToAnnotations().keySet());
      Set<ACSLAnnotation> moved = new HashSet<>();
      for (CFAEdge key : keys) {
        if (key.getFileLocation().getFileName().equals(currentFile)) {
          Collection<ACSLAnnotation> currentAnnotations =
              cfaWithLocs.getEdgesToAnnotations().get(key);
          List<ACSLAnnotation> toRemove = new ArrayList<>();
          for (ACSLAnnotation annotation : currentAnnotations) {
            if (moved.contains(annotation)) {
              continue;
            }
            if (annotation instanceof FunctionContract) {
              if (handleFunctionContract(
                  cfaWithLocs, (CDeclarationEdge) key, (FunctionContract) annotation)) {
                toRemove.add(annotation);
              }
            } else if (annotation instanceof StatementContract) {
              if (handleStatementContract(
                  cfaWithLocs, key, (StatementContract) annotation, blockStructure)) {
                toRemove.add(annotation);
              }
            } else if (annotation instanceof ACSLLoopAnnotation) {
              if (handleLoopAnnotation(cfaWithLocs, key, (ACSLLoopAnnotation) annotation)) {
                toRemove.add(annotation);
              }
            } else if (annotation instanceof ACSLAssertion) {
              // already handled
            } else {
              throw new AssertionError(
                  "Unknown annotation type for annotation\n" + annotation.toString());
            }
            moved.add(annotation);
          }
          cfaWithLocs.getEdgesToAnnotations().get(key).removeAll(toRemove);
        }
      }
    }

    private static boolean handleFunctionContract(
        CFAWithACSLAnnotations cfaWithLocs, CDeclarationEdge edge, FunctionContract annotation) {
      // Annotation is currently placed on declaration edge for the function
      // -> move it to the function entry
      String functionName = edge.getDeclaration().getName();
      FunctionEntryNode entry = cfaWithLocs.getAllFunctions().get(functionName);
      assert entry.getNumLeavingEdges() == 1;
      cfaWithLocs
          .getEdgesToAnnotations()
          .put(entry.getLeavingEdge(0), annotation.getCopyForPreState());
      // Add function contracts to function exits as well because some clauses have to be
      // evaluated in the post-state
      FunctionExitNode exit = entry.getExitNode();
      for (int i = 0; i < exit.getNumEnteringEdges(); i++) {
        CFAEdge currentEdge = exit.getEnteringEdge(i);
        cfaWithLocs.getEdgesToAnnotations().put(currentEdge, annotation.getCopyForPostState());
      }
      return true;
    }

    private static boolean handleStatementContract(
        CFAWithACSLAnnotations cfaWithLocs,
        CFAEdge edge,
        StatementContract annotation,
        BlockStructure blockStructure) {
      // requirements have to be fulfilled by all entering edges
      for (int i = 0; i < edge.getPredecessor().getNumEnteringEdges(); i++) {
        cfaWithLocs
            .getEdgesToAnnotations()
            .put(edge.getPredecessor().getEnteringEdge(i), annotation.getCopyForPreState());
      }
      // Add statement contracts directly after the statement as well because some clauses have to
      // be evaluated in the post-state
      Block innermostBlock = blockStructure.getInnermostBlockOf(edge.getSuccessor());
      if (innermostBlock == null) {
        // TODO: Ignore annotation instead of throwing exception
        throw new AssertionError("Not inside a block");
      } else if (innermostBlock.isFunction()) {
        for (int i = 0; i < edge.getSuccessor().getNumLeavingEdges(); i++) {
          cfaWithLocs
              .getEdgesToAnnotations()
              .put(edge.getSuccessor().getLeavingEdge(i), annotation.getCopyForPostState());
        }
      } else {
        for (CFAEdge blockLeavingEdge : innermostBlock.getLeavingEdges()) {
          for (int i = 0; i < blockLeavingEdge.getSuccessor().getNumLeavingEdges(); i++) {
            cfaWithLocs
                .getEdgesToAnnotations()
                .put(
                    blockLeavingEdge.getSuccessor().getLeavingEdge(i),
                    annotation.getCopyForPostState());
          }
        }
      }
      // TODO
      return true;
    }

    /**
     * Adds the given annotation to the correct edges in the CFA and signals to remove it from the
     * current one if necessary.
     *
     * @param cfaWithLocs A CFA holding location information about the annotation.
     * @param edge The edge on which the annotation was originally placed.
     * @param annotation The annotation to be handled.
     * @return true if the annotation should be removed from the current edge, false otherwise.
     */
    private static boolean handleLoopAnnotation(
        CFAWithACSLAnnotations cfaWithLocs, CFAEdge edge, ACSLLoopAnnotation annotation) {
      CFANode successor = edge.getSuccessor();
      if (edge.getDescription().equals("for")) {
        boolean beforeInit = false;
        CFANode node = successor;
        if (successor.getNumLeavingEdges() == 1) {
          node = successor.getLeavingEdge(0).getSuccessor();
          beforeInit = true;
        }
        for (int i = 0; i < node.getNumEnteringEdges(); i++) {
          cfaWithLocs.getEdgesToAnnotations().put(node.getEnteringEdge(i), annotation);
        }
        // loop invariant only has to hold after initialization
        return beforeInit;
      } else {
        assert edge.getDescription().equals("while") || edge.getDescription().equals("do");
        for (int i = 0; i < successor.getNumEnteringEdges(); i++) {
          CFAEdge currentEdge = successor.getEnteringEdge(i);
          if (!currentEdge.equals(edge)) {
            cfaWithLocs.getEdgesToAnnotations().put(currentEdge, annotation);
          }
        }
        return false;
      }
    }

    /**
     * Adds the given assertion to the correct edges in the CFA.
     *
     * @param cfaWithLocs A CFA holding location information about the annotation.
     * @param loc The location at which the annotation was originally placed.
     * @param annotation The annotation to be handled.
     */
    private static void handleAssertion(
        CFAWithACSLAnnotations cfaWithLocs,
        List<CFAEdge> orderedCFALocs,
        FileLocation loc,
        ACSLAssertion annotation,
        BlockStructure blockStructure)
        throws IOException {
      CFAEdge prev = orderedCFALocs.get(orderedCFALocs.size() - 1);
      CFAEdge next = null;
      // We can start with the second edge because we have at least one edge with node offset zero,
      // and an assertion will surely never be placed before the start of the file
      for (int i = 1; i < orderedCFALocs.size(); i++) {
        if (orderedCFALocs.get(i).getFileLocation().getNodeOffset() > loc.getNodeOffset()) {
          prev = orderedCFALocs.get(i - 1);
          next = orderedCFALocs.get(i);
          break;
        }
      }

      Block innermostBlockOfAssertion = blockStructure.getInnermostBlockOf(loc);
      if (next == null
          || !innermostBlockOfAssertion.getContainedNodes().contains(next.getPredecessor())) {
        Block innermostBlockOfPrevEdge = blockStructure.getInnermostBlockOf(prev.getSuccessor());
        if (innermostBlockOfPrevEdge.equals(innermostBlockOfAssertion)) {
          // Assertion is at very end of block (since next edge is after block)
          cfaWithLocs.getEdgesToAnnotations().put(prev, annotation);
        } else {
          Block lastBlock = null;
          for (Block block : blockStructure.getBlocks()) {
            if (!block.getContainedNodes().contains(prev.getSuccessor()) || block.getEndOffset() >= loc.getNodeOffset()) {
              continue;
            }
            if (lastBlock == null || block.contains(lastBlock)) {
              lastBlock = block;
            }
          }
          for (CFAEdge edge : lastBlock.getLeavingEdges()) {
            cfaWithLocs.getEdgesToAnnotations().put(edge, annotation);
          }
        }
      } else {
        CFANode node = next.getPredecessor();
        for (int i = 0; i < node.getNumEnteringEdges(); i++) {
          CFAEdge currentEdge = node.getEnteringEdge(i);
          cfaWithLocs.getEdgesToAnnotations().put(currentEdge, annotation);
        }
      }
    }

    /**
     * Make sure that all behaviors are actually in scope when they are referenced.
     *
     * <p>This function should only be called after the locations of all annotations have been fixed.
     */
    public static void checkBehaviors(
        Multimap<CFAEdge, ACSLAnnotation> edgesToAnnotations,
        CFAWithACSLAnnotations cfa,
        BlockStructure blockStructure) {
      Map<String, CFAEdge> behaviorDeclarations = new HashMap<>();
      // First, collect all behaviors where they are introduced
      for (Entry<CFAEdge, ACSLAnnotation> entry : edgesToAnnotations.entries()) {
        ACSLAnnotation annotation = entry.getValue();
        if (annotation instanceof FunctionContract) {
          FunctionContract fcontract = (FunctionContract) annotation;
          if (!fcontract.isPreStateRepresentation()) {
            // Behaviors are stored in post-state representation as well, but no need to add twice
            continue;
          }
          for (Behavior behavior : fcontract.getBehaviors()) {
            behaviorDeclarations.put(
                behavior.getName(),
                cfa.getFunctionHead(entry.getKey().getPredecessor().getFunctionName())
                    .getLeavingEdge(0));
          }
        } else if (annotation instanceof StatementContract) {
          StatementContract scontract = (StatementContract) annotation;
          if (!scontract.isPreStateRepresentation()) {
            // Behaviors are stored in post-state representation as well, but are declared
            // where pre-state representation is placed
            continue;
          }
          for (Behavior behavior : scontract.getBehaviors()) {
            behaviorDeclarations.put(behavior.getName(), entry.getKey());
          }
        }
      }
      // Now check whether all referenced behaviors are still in scope
      for (Entry<CFAEdge, ACSLAnnotation> entry : edgesToAnnotations.entries()) {
        ACSLAnnotation annotation = entry.getValue();
        if (annotation instanceof StatementContract) {
          StatementContract scontract = (StatementContract) annotation;
          if (!scontract.isPreStateRepresentation()) {
            // No need to check twice, a behavior is either in scope for the whole statement or for
            // none of it
            continue;
          }
          for (Behavior behavior : scontract.getEnclosingBehaviors()) {
            assert behaviorDeclarations.containsKey(behavior.getName())
                : "Unknown behavior: " + behavior.getName();
            assert inSameScope(
                    behaviorDeclarations.get(behavior.getName()).getSuccessor(),
                    entry.getKey().getSuccessor(),
                    blockStructure)
                : "Statement contract\n" + scontract + "\nis not in scope of " + behavior.getName();
          }
        } else if (annotation instanceof ACSLLoopAnnotation) {
          ACSLLoopAnnotation loopAnnotation = (ACSLLoopAnnotation) annotation;
          for (Behavior behavior : loopAnnotation.getReferencedBehaviors()) {
            assert behaviorDeclarations.containsKey(behavior.getName())
                : "Unknown behavior: " + behavior.getName();
            assert inSameScope(
                    behaviorDeclarations.get(behavior.getName()).getSuccessor(),
                    entry.getKey().getSuccessor(),
                    blockStructure)
                : "Loop annotation\n" + loopAnnotation + "\nis not in scope of " + behavior.getName();
          }
        } else if (annotation instanceof ACSLAssertion) {
          ACSLAssertion assertion = (ACSLAssertion) annotation;
          for (Behavior behavior : assertion.getEnclosingBehaviors()) {
            assert behaviorDeclarations.containsKey(behavior.getName())
                : "Unknown behavior: " + behavior.getName();
            assert inSameScope(
                    behaviorDeclarations.get(behavior.getName()).getSuccessor(),
                    entry.getKey().getSuccessor(),
                    blockStructure)
                : "Assertion\n" + assertion + "\nis not in scope of " + behavior.getName();
          }
        }
      }
    }

    public List<ACSLAnnotation> parseACSLAnnotations() throws CParserException {
      try {
        Symbol symbol = this.parse();
        if (symbol != null) {
          return (List<ACSLAnnotation>) symbol.value;
        } else {
          return ImmutableList.of();
        }
      } catch (Exception e) {
        throw new CParserException(e);
      }
    }

    public String getCurrentFunctionName() {
      int currentOffset = orderedLocs.get(scanner.getCurrentAnnotation()).getNodeOffset();
      for (int i = 0; i < orderedCFALocs.size(); i++) {
        if (orderedCFALocs.get(i).getFileLocation().getNodeOffset() > currentOffset) {
          return orderedCFALocs.get(i).getSuccessor().getFunctionName();
        }
      }
      return orderedCFALocs.get(orderedCFALocs.size() - 1).getSuccessor().getFunctionName();
    }

    public void putBehavior(Behavior behavior) {
      behaviors.add(behavior);
    }

    public Behavior getBehavior(String behaviorName) {
      for (Behavior behavior : behaviors) {
        if (behavior.getName().equals(behaviorName)) {
          return behavior;
        }
      }
      throw new AssertionError("Unknown behavior identifier: " + behaviorName);
    }

    private static boolean inSameScope(
        CFANode oldNode, CFANode newNode, BlockStructure blockStructure) {
      return blockStructure.getNodesInInnermostBlockOf(oldNode).contains(newNode);
    }

    public List<FileLocation> getLocs() {
      return orderedLocs;
    }

    public CFAWithACSLAnnotations getCFA() {
      return cfa;
    }

    @Override
    public ACSLScanner getScanner() {
      return scanner;
    }

    public void checkIdentifier(ACSLIdentifier i) {
      try {
        visitor.visit(i);
      } catch (AssertionError e) {
        annotationsToSkip.add(scanner.getCurrentAnnotation());
      }
    }

    public boolean shouldSkip(int i) {
      return annotationsToSkip.contains(i);
    }
:}

scan with {: return scanner.getNext(); :}

terminal TRUE, FALSE;
terminal LBRACKET, RBRACKET;
terminal AND, OR, IMP, EQV, XOR;
terminal NEG;
terminal EQ, NEQ, LEQ, GEQ, GT, LT;
terminal BAND, BOR, BIMP, BEQV, BXOR;
terminal BNEG, UPLUS, UMINUS, STAR, AMPERSAND;
terminal SIZEOF;
terminal PLUS, MINUS, TIMES, DIVIDE, MOD, LSHIFT, RSHIFT;
terminal LPAREN, RPAREN;
terminal SEMI;
terminal REQ, ENS, ASS;
terminal BigInteger LITERAL;
terminal String STRING_LITERAL;
terminal String IDENTIFIER;
terminal ACSLType TYPE;
terminal NEXTCONTRACT;
terminal LINVARIANT;
terminal ASSERT, CHECK;
terminal BEHAVIOR;
terminal COLON;
terminal QUESTION;
terminal PRED_START;
terminal FOR;
terminal COMMA;
terminal COMPLETE_BEHAVIORS, DISJOINT_BEHAVIORS;
terminal OLD;
terminal RETVAL;
terminal FORALL, EXISTS;

non terminal List<ACSLAnnotation> annotations;
non terminal ACSLAnnotation annotation;
non terminal FunctionContract fcontract;
non terminal StatementContract scontract;
non terminal ACSLLoopAnnotation loopannotation;
non terminal ACSLAssertion assertion;
non terminal ContractBuilder clauses;
non terminal BehaviorBuilder behavior_body;
non terminal Collection<RequiresClause> req_clauses;
non terminal Collection<EnsuresClause> ens_clauses;
non terminal Collection<AssumesClause> ass_clauses;
non terminal Collection<Behavior> behaviors;
non terminal Collection<CompletenessClause> completeness_clauses;
non terminal RequiresClause req_clause;
non terminal EnsuresClause ens_clause;
non terminal AssumesClause ass_clause;
non terminal ACSLLoopInvariant loop_clauses;
non terminal CompletenessClause completeness_clause;
non terminal Map<List<Behavior>, ACSLLoopInvariant> loop_behaviors;
non terminal List<String> behavior_identifiers, identifiers;
non terminal Behavior behavior;
non terminal ACSLPredicate predicate;
non terminal ACSLPredicate asc_comp_predicate, desc_comp_predicate, eq_chain, asc_base, desc_base;
non terminal ACSLTerm term;
non terminal ACSLBinaryOperator asc_rel_op, desc_rel_op, log_op, arith_op, bit_op;
non terminal ACSLUnaryOperator unary_op;
non terminal Set<Binder> binders;

precedence left FORALL, EXISTS;
precedence right QUESTION;
precedence left EQV;
precedence right IMP;
precedence left OR;
precedence left XOR;
precedence left AND;
precedence left BEQV;
precedence right BIMP;
precedence left BOR;
precedence left BXOR;
precedence left BAND;
precedence nonassoc EQ, NEQ;
precedence nonassoc LEQ, GEQ, GT, LT;
precedence left LSHIFT, RSHIFT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence right NEG, BNEG, UPLUS, UMINUS, STAR, AMPERSAND, RPAREN;
precedence right LBRACKET;

annotations ::= annotations:as annotation:a {: assert !a.getCompletenessPredicate().equals(ACSLPredicate.getFalse());
                                               as.add(a); RESULT = as; :}
            | /* nothing */                 {: RESULT = new ArrayList<>(); :};
annotation ::= fcontract:f {: RESULT = f; :}
            | scontract:s           {:  RESULT = s; :}
            | loopannotation:l {: RESULT = l; :}
            | assertion:a {: RESULT = a; :};
assertion ::= NEXTCONTRACT ASSERT predicate:p SEMI PRED_START                        {: RESULT = new ACSLAssertion(ACSLAssertion.AssertionKind.ASSERT, p); :}
            | NEXTCONTRACT behavior_identifiers:i ASSERT predicate:p SEMI PRED_START {: List<Behavior> enclosingBehaviors = new ArrayList<>();
                                                                                        for(String id : i) { enclosingBehaviors.add(parser.getBehavior(id)); }
                                                                                        RESULT = new ACSLAssertion(ACSLAssertion.AssertionKind.ASSERT, enclosingBehaviors, p); :}
            | NEXTCONTRACT CHECK predicate:p SEMI PRED_START                         {: RESULT = new ACSLAssertion(ACSLAssertion.AssertionKind.CHECK, p); :}
            | NEXTCONTRACT behavior_identifiers:i CHECK predicate:p SEMI PRED_START {: List<Behavior> enclosingBehaviors = new ArrayList<>();
                                                                             for(String id : i) { enclosingBehaviors.add(parser.getBehavior(id)); }
                                                                             RESULT = new ACSLAssertion(ACSLAssertion.AssertionKind.CHECK, enclosingBehaviors, p); :};
loopannotation ::= NEXTCONTRACT loop_clauses:c loop_behaviors:b {: RESULT = new ACSLLoopAnnotation(c, b); :}
                | NEXTCONTRACT loop_behaviors:b                 {: RESULT = new ACSLLoopAnnotation(b); :}
                | NEXTCONTRACT loop_clauses:c                   {: RESULT = new ACSLLoopAnnotation(c); :};
fcontract ::= NEXTCONTRACT clauses:c                {: RESULT = c.build(); :};
scontract ::= NEXTCONTRACT behavior_identifiers:i clauses:c
                                                    {: List<Behavior> enclosingBehaviors = new ArrayList<>();
                                                       for(String id : i) { enclosingBehaviors.add(parser.getBehavior(id)); }
                                                       RESULT = StatementContract.fromFunctionContract(enclosingBehaviors, c.build()); :};
behavior_identifiers ::= FOR identifiers:i COLON PRED_START {: RESULT = i; :};
identifiers ::= identifiers:is COMMA IDENTIFIER:i    {: is.add(i); RESULT = is; :}
            | IDENTIFIER:i      {: List<String> identifiers = new ArrayList<>();
                                   identifiers.add(i); RESULT = identifiers; :};
loop_behaviors ::= loop_behaviors:b behavior_identifiers:i loop_clauses:c   {: List<Behavior> holdsFor = new ArrayList<>(i.size());
                                                                               for(String id : i) {
                                                                               holdsFor.add(parser.getBehavior(id)); }
                                                                               b.put(holdsFor, c); RESULT = b; :}
                | behavior_identifiers:i loop_clauses:c                     {: Map<List<Behavior>, ACSLLoopInvariant> loopBehaviors = new HashMap<>();
                                                                               List<Behavior> holdsFor = new ArrayList<>(i.size());
                                                                               for(String id : i) {
                                                                               holdsFor.add(parser.getBehavior(id)); }
                                                                               loopBehaviors.put(holdsFor, c); RESULT = loopBehaviors; :};
loop_clauses ::= loop_clauses:c LINVARIANT predicate:p SEMI PRED_START {: RESULT = c.and(p); :}
            | LINVARIANT predicate:p SEMI PRED_START                   {: assert p.isAllowedIn(ACSLLoopInvariant.class); RESULT = new ACSLLoopInvariant(p); :};
clauses ::= req_clauses:r ens_clauses:e behaviors:b completeness_clauses:c {: RESULT = new ContractBuilder().addAll(r).addAll(e).addAll(b).addAll(c); :};
req_clauses ::=
            req_clauses:c req_clause:r              {: c.add(r); RESULT = c; :}
            | /* nothing */                         {: RESULT = new HashSet<>(); :};
ens_clauses ::=
            ens_clauses:c ens_clause:e              {: c.add(e); RESULT = c; :}
            | /* nothing */                         {: RESULT = new HashSet<>(); :};
behaviors ::=
            behaviors:c behavior:b                  {: c.add(b); RESULT = c; :}
            | /* nothing */                         {: RESULT = new HashSet<>(); :};
behavior ::= BEHAVIOR IDENTIFIER:i COLON PRED_START behavior_body:bb   {: bb.setBehaviorName(i);
                                                                          Behavior b = bb.build();
                                                                          parser.putBehavior(b); RESULT = b; :};
completeness_clauses ::= completeness_clauses:cs completeness_clause:c  {: cs.add(c); RESULT = cs; :}
                        | /* nothing */                                 {: RESULT = new HashSet<>(); :};
completeness_clause ::= COMPLETE_BEHAVIORS identifiers:i SEMI PRED_START {: List<Behavior> behaviors = new ArrayList<>(i.size());
                                                               for (String id : i) { behaviors.add(parser.getBehavior(id)); }
                                                               RESULT = new CompletenessClause(behaviors, CompletenessClause.RelationKind.COMPLETE); :}
                        | COMPLETE_BEHAVIORS SEMI PRED_START {: RESULT = new CompletenessClause(ImmutableList.of(), CompletenessClause.RelationKind.COMPLETE); :}
                        | DISJOINT_BEHAVIORS identifiers:i SEMI PRED_START {: List<Behavior> behaviors = new ArrayList<>(i.size());
                                                               for (String id : i) { behaviors.add(parser.getBehavior(id)); }
                                                               RESULT = new CompletenessClause(behaviors, CompletenessClause.RelationKind.DISJOINT); :}
                        | DISJOINT_BEHAVIORS SEMI PRED_START {: RESULT = new CompletenessClause(ImmutableList.of(), CompletenessClause.RelationKind.DISJOINT); :};
behavior_body ::= ass_clauses:a req_clauses:r ens_clauses:e
                                                    {: RESULT = new BehaviorBuilder().addAll(a).addAll(r).addAll(e); :};
ass_clauses ::=
            ass_clauses:c ass_clause:a              {: c.add(a); RESULT = c; :}
            | /* nothing */                         {: RESULT = new HashSet<>(); :};
req_clause ::= REQ predicate:p SEMI PRED_START {: assert p.isAllowedIn(RequiresClause.class); RESULT = new RequiresClause(p); :};
ens_clause ::= ENS predicate:p SEMI PRED_START {: assert p.isAllowedIn(EnsuresClause.class); RESULT = new EnsuresClause(p); :};
ass_clause ::= ASS predicate:p SEMI PRED_START {: assert p.isAllowedIn(AssumesClause.class); RESULT = new AssumesClause(p); :};
predicate ::= PRED_START TRUE                                       {: RESULT = ACSLPredicate.getTrue(); :}
        | PRED_START FALSE                                          {: RESULT = ACSLPredicate.getFalse(); :}
	| predicate:p1 log_op:op predicate:p2                       {: RESULT = new ACSLLogicalPredicate(p1, p2, op); :}
	| PRED_START term:t1 NEQ term:t2                            {: RESULT = new ACSLSimplePredicate(new ACSLBinaryTerm(t1, t2, ACSLBinaryOperator.NEQ)); :}
	| PRED_START eq_chain:ec                                    {: RESULT = ec; :}
	| PRED_START asc_comp_predicate:p                           {: RESULT = p; :}
	| PRED_START desc_comp_predicate:p                          {: RESULT = p; :}
	| PRED_START NEG predicate:p                                {: RESULT = p.negate(); :} %prec NEG
	| PRED_START LPAREN predicate:p RPAREN                      {: RESULT = p; :}
	| predicate:p1 QUESTION predicate:p2 COLON predicate:p3     {: RESULT = new ACSLTernaryCondition(p1, p2, p3); :}
	| PRED_START FORALL binders:b SEMI predicate:p              {: BinderApplicationVisitor visitor = new BinderApplicationVisitor(b, Binder.Quantifier.FORALL);
	                                                               RESULT = p.accept(visitor); :}
	| PRED_START EXISTS binders:b SEMI predicate:p              {: BinderApplicationVisitor visitor = new BinderApplicationVisitor(b, Binder.Quantifier.EXISTS);
	                                                               RESULT = p.accept(visitor); :}
	| PRED_START OLD LPAREN predicate:p RPAREN                  {: RESULT = new PredicateAt(p, ACSLDefaultLabel.OLD); :};
asc_comp_predicate ::= asc_comp_predicate:p asc_rel_op:op term:t    {: ACSLTerm innerLeft;
                                                                       if (p instanceof ACSLSimplePredicate) {
                                                                        innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) p).getTerm()).getRight();
                                                                       } else {
                                                                        innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ((ACSLLogicalPredicate) p).
                                                                           getRight()).getTerm()).getRight();
                                                                       }
                                                                       ACSLPredicate right = new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, op));
                                                                       RESULT = new ACSLLogicalPredicate(p, right, ACSLBinaryOperator.AND);  :}
        | asc_comp_predicate:p EQ term:t                            {: ACSLTerm innerLeft;
                                                                      if (p instanceof ACSLSimplePredicate) {
                                                                       innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) p).getTerm()).getRight();
                                                                      } else {
                                                                       innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ((ACSLLogicalPredicate) p).
                                                                          getRight()).getTerm()).getRight();
                                                                      }
                                                                      ACSLPredicate right = new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, ACSLBinaryOperator.EQ));
                                                                      RESULT = new ACSLLogicalPredicate(p, right, ACSLBinaryOperator.AND); :}
        | asc_base:ab                      {: RESULT = ab; :}
        | eq_chain:ec asc_rel_op:op term:t {: ACSLTerm innerLeft;
                                              if (ec instanceof ACSLSimplePredicate) {
                                                innerLeft = ((ACSLBinaryTerm)((ACSLSimplePredicate) ec).getTerm()).getRight();
                                              } else {
                                                innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ((ACSLLogicalPredicate) ec).getRight()).getTerm()).
                                                   getRight();
                                              }
                                              ACSLPredicate right = new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, op));
                                              RESULT = new ACSLLogicalPredicate(ec, right, ACSLBinaryOperator.AND); :};
desc_comp_predicate ::= desc_comp_predicate:p desc_rel_op:op term:t {: ACSLTerm innerLeft;
                                                                       if (p instanceof ACSLSimplePredicate) {
                                                                        innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) p).getTerm()).getRight();
                                                                       } else {
                                                                        innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ((ACSLLogicalPredicate) p).
                                                                           getRight()).getTerm()).getRight();
                                                                       }
                                                                       ACSLPredicate right = new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, op));
                                                                       RESULT = new ACSLLogicalPredicate(p, right, ACSLBinaryOperator.AND); :}
        | desc_comp_predicate:p EQ term:t                             {: ACSLTerm innerLeft;
                                                                       if (p instanceof ACSLSimplePredicate) {
                                                                        innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) p).getTerm()).getRight();
                                                                       } else {
                                                                        innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ((ACSLLogicalPredicate) p).
                                                                           getRight()).getTerm()).getRight();
                                                                       }
                                                                       ACSLPredicate right = new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, ACSLBinaryOperator.EQ));
                                                                       RESULT = new ACSLLogicalPredicate(p, right, ACSLBinaryOperator.AND); :}
        | desc_base:db                      {: RESULT = db; :}
        | eq_chain:ec desc_rel_op:op term:t {: ACSLTerm innerLeft;
                                               if (ec instanceof ACSLSimplePredicate) {
                                                innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ec).getTerm()).getRight();
                                               } else {
                                                innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ((ACSLLogicalPredicate) ec).getRight()).getTerm()).
                                                   getRight();
                                               }
                                               ACSLPredicate right = new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, op));
                                               RESULT = new ACSLLogicalPredicate(ec, right, ACSLBinaryOperator.AND); :};
eq_chain ::= eq_chain:ec EQ term:t  {: ACSLTerm innerLeft;
                                       if (ec instanceof ACSLSimplePredicate) {
                                        innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ec).getTerm()).getRight();
                                       } else {
                                        innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ((ACSLLogicalPredicate) ec).getRight()).getTerm()).getRight();
                                       }
                                       ACSLPredicate right = new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, ACSLBinaryOperator.EQ));
                                       RESULT = new ACSLLogicalPredicate(ec, right, ACSLBinaryOperator.AND); :}
           | term:t1 EQ term:t2     {: RESULT = new ACSLSimplePredicate(new ACSLBinaryTerm(t1, t2, ACSLBinaryOperator.EQ)); :};
asc_base ::= term:t1 asc_rel_op:op term:t2    {: RESULT = new ACSLSimplePredicate(new ACSLBinaryTerm(t1, t2, op)); :};
desc_base ::= term:t1 desc_rel_op:op term:t2  {: RESULT = new ACSLSimplePredicate(new ACSLBinaryTerm(t1, t2, op)); :};
binders ::= TYPE:t IDENTIFIER:i COMMA identifiers:is COMMA binders:b {: Set<String> variables = new HashSet();
                                                                        variables.add(i); variables.addAll(is);
                                                                        Binder binder = new Binder(t, variables);
                                                                        b.add(binder); RESULT = b; :}
         | TYPE:t IDENTIFIER:i COMMA binders:b                       {: Set<String> variables = new HashSet();
                                                                        variables.add(i);
                                                                        Binder binder = new Binder(t, variables);
                                                                        b.add(binder); RESULT = b; :}
         | TYPE:t IDENTIFIER:i COMMA identifiers:is                  {: Set<Binder> binders = new HashSet();
                                                                        Set<String> variables = new HashSet();
                                                                        variables.add(i); variables.addAll(is);
                                                                        Binder binder = new Binder(t, variables);
                                                                        binders.add(binder); RESULT = binders; :}
         | TYPE:t IDENTIFIER:i                                       {: Set<Binder> binders = new HashSet();
                                                                        Set<String> variables = new HashSet();
                                                                        variables.add(i);
                                                                        Binder binder = new Binder(t, variables);
                                                                        binders.add(binder); RESULT = binders; :};
term ::= PRED_START term:t                              {: RESULT = t; :}
        | LITERAL:l                                     {: RESULT = new ACSLIntegerLiteral(l); :}
        | STRING_LITERAL:l                              {: RESULT = new ACSLStringLiteral(l); :}
        | IDENTIFIER:i                                  {: ACSLIdentifier identifier = new ACSLIdentifier(i, parser.getCurrentFunctionName());
                                                           RESULT = identifier; :}
        | term:t1 LBRACKET term:t2 RBRACKET             {: RESULT = new ACSLArrayAccess(t1, t2); :}
        | unary_op:op term:t                            {: RESULT = new ACSLUnaryTerm(t, op); :}
        | SIZEOF LPAREN term:t RPAREN                   {: RESULT = new ACSLUnaryTerm(t, ACSLUnaryOperator.SIZEOF); :}
        | LPAREN PRED_START TYPE:tp RPAREN term:t       {: RESULT = new ACSLCast(tp, t); :}
        | term:t1 arith_op:op term:t2                   {: RESULT = new ACSLBinaryTerm(t1, t2, op); :}
        | term:t1 bit_op:op term:t2                     {: RESULT = new ACSLBinaryTerm(t1, t2, op); :}
        | LPAREN term:t RPAREN                          {: RESULT = t; :}
        | OLD LPAREN term:t RPAREN                      {: RESULT = new TermAt(t, ACSLDefaultLabel.OLD); :}
        | RETVAL                                        {: RESULT = new ACSLResult(parser.getCurrentFunctionName()); :};
log_op ::= AND  {: RESULT = ACSLBinaryOperator.AND; :}
        | OR    {: RESULT = ACSLBinaryOperator.OR; :}
        | IMP   {: RESULT = ACSLBinaryOperator.IMP; :}
        | EQV   {: RESULT = ACSLBinaryOperator.EQV; :}
        | XOR   {: RESULT = ACSLBinaryOperator.XOR; :};
asc_rel_op ::= LEQ      {: RESULT = ACSLBinaryOperator.LEQ; :}
        | LT            {: RESULT = ACSLBinaryOperator.LT; :};
desc_rel_op ::= GT      {: RESULT = ACSLBinaryOperator.GT; :}
        | GEQ           {: RESULT = ACSLBinaryOperator.GEQ; :};
arith_op ::= PLUS       {: RESULT = ACSLBinaryOperator.PLUS; :}
        | MINUS         {: RESULT = ACSLBinaryOperator.MINUS; :}
        | STAR          {: RESULT = ACSLBinaryOperator.TIMES; :}    %prec TIMES
        | DIVIDE        {: RESULT = ACSLBinaryOperator.DIVIDE; :}
        | MOD           {: RESULT = ACSLBinaryOperator.MOD; :}
        | LSHIFT        {: RESULT = ACSLBinaryOperator.LSHIFT; :}
        | RSHIFT        {: RESULT = ACSLBinaryOperator.RSHIFT; :};
bit_op ::= AMPERSAND    {: RESULT = ACSLBinaryOperator.BAND; :}     %prec BAND
        | BOR           {: RESULT = ACSLBinaryOperator.BOR; :}
        | BIMP          {: RESULT = ACSLBinaryOperator.BIMP; :}
        | BEQV          {: RESULT = ACSLBinaryOperator.BEQV; :}
        | BXOR          {: RESULT = ACSLBinaryOperator.BXOR; :};
unary_op ::= BNEG       {: RESULT = ACSLUnaryOperator.BNEG; :}
        | PLUS          {: RESULT = ACSLUnaryOperator.PLUS; :}      %prec UPLUS
        | MINUS         {: RESULT = ACSLUnaryOperator.MINUS; :}     %prec UMINUS
        | STAR          {: RESULT = ACSLUnaryOperator.POINTER_DEREF; :}
        | AMPERSAND     {: RESULT = ACSLUnaryOperator.ADDRESS_OF; :};