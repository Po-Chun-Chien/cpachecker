// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/org/sosy_lab/cpachecker/cfa/ast/acsl/ACSLScanner.jflex

// This file is part of CPAchecker,
// a tool for configurable software verification:
// https://cpachecker.sosy-lab.org
//
// SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
//
// SPDX-License-Identifier: Apache-2.0

package org.sosy_lab.cpachecker.cfa.ast.acsl;

import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.logging.Level;
import java_cup.runtime.Symbol;
import org.sosy_lab.common.log.LogManager;

@javax.annotation.processing.Generated("JFlex")
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE"})

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings({"FallThrough", "all", "cast"})
class ACSLScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int SINGLE_LINE_ANNOTATION = 2;
  public static final int MULTI_LINE_ANNOTATION = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\2\0\1\11\1\12\1\0\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\0\1\21\1\22\11\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\13\33"+
    "\1\34\10\33\1\35\5\33\1\36\1\37\1\40\1\41"+
    "\1\42\1\0\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\33\1\71\1\33\1\72\1\0\1\73\1\0\1\74"+
    "\6\0\1\3\32\0\1\75\u01df\0\1\75\177\0\13\75"+
    "\35\0\2\3\5\0\1\75\57\0\1\75\240\0\1\75"+
    "\377\0\u0100\76";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\1\2\3\1\4\1\2\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\2\1\22\1\23\1\24"+
    "\1\25\1\2\1\26\1\27\14\24\1\30\1\31\1\11"+
    "\2\0\1\32\1\0\1\33\1\34\1\0\2\16\1\0"+
    "\1\35\1\36\1\37\1\40\1\41\5\0\1\42\21\24"+
    "\1\43\1\44\1\45\1\46\1\16\2\0\1\47\6\0"+
    "\13\24\1\50\1\51\10\24\1\52\1\53\3\0\1\54"+
    "\2\0\4\24\1\51\7\24\1\51\6\24\4\0\1\55"+
    "\4\24\1\56\5\24\2\0\1\24\1\51\2\24\1\0"+
    "\1\57\2\0\1\60\6\24\4\0\1\24\1\0\1\51"+
    "\1\61\1\62\1\63\1\64\1\65\3\24\1\66\4\0"+
    "\1\24\1\0\1\67\2\24\1\0\1\51\2\0\1\70"+
    "\6\0\1\51\16\0\1\51\12\0\1\71\6\0\1\72"+
    "\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\275\0\374\0\u013b\0\275"+
    "\0\u017a\0\u01b9\0\u01f8\0\275\0\u0237\0\275\0\275\0\275"+
    "\0\275\0\275\0\u0276\0\275\0\u02b5\0\u02f4\0\275\0\275"+
    "\0\u0333\0\u0372\0\u03b1\0\275\0\u03f0\0\275\0\u042f\0\275"+
    "\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627"+
    "\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\275\0\u07e0"+
    "\0\u081f\0\u085e\0\275\0\u01f8\0\u01f8\0\275\0\u089d\0\u08dc"+
    "\0\u091b\0\u095a\0\275\0\u0999\0\u09d8\0\275\0\275\0\u0a17"+
    "\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\275\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8"+
    "\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\275\0\275"+
    "\0\275\0\275\0\275\0\u0f81\0\u0fc0\0\275\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u03f0"+
    "\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7"+
    "\0\u1626\0\275\0\275\0\u1665\0\u16a4\0\u16e3\0\275\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u03f0\0\u189c\0\u18db"+
    "\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3"+
    "\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb"+
    "\0\275\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u03f0\0\u1e06\0\u1e45"+
    "\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d"+
    "\0\u207c\0\u20bb\0\275\0\u20fa\0\u2139\0\u03f0\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af"+
    "\0\u23ee\0\u242d\0\u246c\0\u03f0\0\275\0\275\0\275\0\u03f0"+
    "\0\u24ab\0\u24ea\0\u2529\0\u03f0\0\u2568\0\u25a7\0\u25e6\0\u2625"+
    "\0\u2664\0\u26a3\0\u03f0\0\u26e2\0\u2721\0\u2760\0\275\0\u279f"+
    "\0\u27de\0\u03f0\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958"+
    "\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48"+
    "\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40"+
    "\0\u2f7f\0\u2fbe\0\275\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9"+
    "\0\u3138\0\275\0\275";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\4\2\5\1\6\13\4\1\7\54\4\2\5\1\4"+
    "\1\10\2\4\1\11\1\4\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\4"+
    "\3\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\2\35\1\51\2\35\1\52"+
    "\5\35\1\53\1\54\1\35\1\55\3\35\1\56\1\57"+
    "\1\4\2\5\4\4\1\6\1\4\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\60\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\4\3\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\2\35\1\51\2\35"+
    "\1\52\5\35\1\53\1\54\1\35\1\55\3\35\1\56"+
    "\1\57\1\4\1\5\101\0\1\4\111\0\1\61\3\0"+
    "\1\62\57\0\1\10\123\0\1\63\47\0\2\64\4\0"+
    "\2\64\1\65\65\64\13\0\1\66\104\0\1\67\112\0"+
    "\1\70\1\71\20\0\1\70\10\0\1\71\31\0\2\26"+
    "\10\0\1\70\1\71\20\0\1\70\10\0\1\71\27\0"+
    "\1\72\5\0\1\73\1\74\76\0\1\75\76\0\1\76"+
    "\1\77\70\0\2\35\7\0\3\35\4\0\31\35\53\0"+
    "\1\100\1\101\10\0\1\102\2\0\1\103\1\0\1\104"+
    "\51\0\1\105\57\0\2\35\7\0\3\35\4\0\2\35"+
    "\1\106\26\35\26\0\2\35\7\0\3\35\4\0\23\35"+
    "\1\107\5\35\26\0\2\35\7\0\3\35\4\0\5\35"+
    "\1\110\11\35\1\111\11\35\26\0\2\35\7\0\3\35"+
    "\4\0\10\35\1\112\6\35\1\113\11\35\26\0\2\35"+
    "\7\0\3\35\4\0\11\35\1\114\5\35\1\115\11\35"+
    "\26\0\2\35\7\0\3\35\4\0\16\35\1\116\12\35"+
    "\26\0\2\35\7\0\3\35\4\0\14\35\1\117\2\35"+
    "\1\120\11\35\26\0\2\35\7\0\3\35\4\0\16\35"+
    "\1\121\12\35\26\0\2\35\7\0\3\35\4\0\17\35"+
    "\1\122\11\35\26\0\2\35\7\0\3\35\4\0\5\35"+
    "\1\123\23\35\26\0\2\35\7\0\3\35\4\0\10\35"+
    "\1\124\1\125\17\35\26\0\2\35\7\0\3\35\4\0"+
    "\16\35\1\126\12\35\77\0\1\127\24\0\1\10\107\0"+
    "\1\130\76\0\1\131\74\0\1\132\102\0\1\133\21\0"+
    "\1\133\54\0\1\70\21\0\1\70\40\0\1\134\105\0"+
    "\1\135\77\0\1\136\137\0\1\137\50\0\1\140\15\0"+
    "\1\141\73\0\1\142\67\0\1\143\113\0\1\144\34\0"+
    "\2\35\7\0\3\35\4\0\17\35\1\145\11\35\26\0"+
    "\2\35\7\0\3\35\4\0\23\35\1\146\5\35\26\0"+
    "\2\35\7\0\3\35\4\0\10\35\1\147\20\35\26\0"+
    "\2\35\7\0\3\35\4\0\17\35\1\150\11\35\26\0"+
    "\2\35\7\0\3\35\4\0\1\35\1\151\3\35\1\152"+
    "\23\35\26\0\2\35\7\0\3\35\4\0\15\35\1\153"+
    "\13\35\26\0\2\35\7\0\3\35\4\0\23\35\1\154"+
    "\5\35\26\0\2\35\7\0\3\35\4\0\25\35\1\155"+
    "\3\35\26\0\2\35\7\0\3\35\4\0\23\35\1\156"+
    "\5\35\26\0\2\35\7\0\3\35\4\0\17\35\1\157"+
    "\11\35\26\0\2\35\7\0\3\35\4\0\22\35\1\160"+
    "\6\35\26\0\2\35\7\0\3\35\4\0\24\35\1\161"+
    "\4\35\26\0\2\35\7\0\3\35\4\0\16\35\1\162"+
    "\1\163\11\35\26\0\2\35\7\0\3\35\4\0\1\35"+
    "\1\164\17\35\1\165\7\35\26\0\2\35\7\0\3\35"+
    "\4\0\17\35\1\166\11\35\26\0\2\35\7\0\3\35"+
    "\4\0\7\35\1\167\20\35\1\170\26\0\2\35\7\0"+
    "\3\35\4\0\23\35\1\171\5\35\34\0\1\172\76\0"+
    "\1\173\121\0\1\174\101\0\1\175\104\0\1\176\60\0"+
    "\1\177\115\0\1\200\100\0\1\201\31\0\2\35\7\0"+
    "\3\35\4\0\17\35\1\164\11\35\26\0\2\35\7\0"+
    "\3\35\4\0\5\35\1\202\17\35\1\203\3\35\26\0"+
    "\2\35\7\0\3\35\4\0\1\35\1\204\27\35\26\0"+
    "\2\35\7\0\3\35\4\0\14\35\1\205\14\35\26\0"+
    "\2\35\7\0\3\35\4\0\22\35\1\206\6\35\26\0"+
    "\2\35\7\0\3\35\4\0\3\35\1\207\25\35\26\0"+
    "\2\35\7\0\3\35\4\0\20\35\1\210\10\35\26\0"+
    "\2\35\7\0\3\35\4\0\12\35\1\211\16\35\26\0"+
    "\2\35\7\0\3\35\4\0\2\35\1\212\26\35\26\0"+
    "\2\35\7\0\3\35\4\0\25\35\1\213\3\35\26\0"+
    "\2\35\7\0\3\35\4\0\1\35\1\214\27\35\26\0"+
    "\2\35\7\0\3\35\4\0\5\35\1\215\23\35\26\0"+
    "\2\35\7\0\3\35\4\0\7\35\1\216\21\35\26\0"+
    "\2\35\7\0\3\35\4\0\20\35\1\217\10\35\26\0"+
    "\2\35\7\0\3\35\4\0\14\35\1\206\14\35\26\0"+
    "\2\35\7\0\3\35\4\0\25\35\1\220\3\35\26\0"+
    "\2\35\7\0\3\35\4\0\22\35\1\221\6\35\26\0"+
    "\2\35\7\0\3\35\4\0\16\35\1\222\12\35\26\0"+
    "\2\35\7\0\3\35\4\0\5\35\1\223\23\35\26\0"+
    "\2\35\7\0\3\35\4\0\11\35\1\224\17\35\71\0"+
    "\1\225\76\0\1\226\54\0\1\227\122\0\1\230\56\0"+
    "\1\231\51\0\2\35\7\0\3\35\4\0\22\35\1\232"+
    "\6\35\26\0\2\35\7\0\3\35\4\0\15\35\1\233"+
    "\13\35\26\0\2\35\7\0\3\35\4\0\26\35\1\234"+
    "\2\35\26\0\2\35\7\0\3\35\4\0\5\35\1\235"+
    "\23\35\26\0\2\35\7\0\3\35\4\0\13\35\1\236"+
    "\15\35\26\0\2\35\7\0\3\35\4\0\14\35\1\237"+
    "\14\35\26\0\2\35\7\0\3\35\4\0\17\35\1\240"+
    "\11\35\26\0\2\35\7\0\3\35\4\0\14\35\1\241"+
    "\14\35\26\0\2\35\7\0\3\35\4\0\22\35\1\242"+
    "\6\35\26\0\2\35\7\0\3\35\4\0\24\35\1\206"+
    "\4\35\26\0\2\35\7\0\3\35\4\0\7\35\1\243"+
    "\21\35\5\0\1\244\2\0\1\244\1\0\1\244\13\0"+
    "\2\35\7\0\3\35\4\0\31\35\12\0\1\245\13\0"+
    "\2\35\7\0\3\35\4\0\31\35\26\0\2\35\7\0"+
    "\3\35\4\0\11\35\1\246\17\35\26\0\2\35\7\0"+
    "\3\35\4\0\24\35\1\247\4\35\26\0\2\35\7\0"+
    "\3\35\4\0\5\35\1\250\23\35\26\0\2\35\7\0"+
    "\3\35\4\0\17\35\1\251\11\35\26\0\2\35\7\0"+
    "\3\35\4\0\7\35\1\167\21\35\72\0\1\252\57\0"+
    "\1\253\105\0\1\254\76\0\1\255\42\0\2\35\7\0"+
    "\3\35\4\0\24\35\1\256\4\35\26\0\2\35\7\0"+
    "\3\35\4\0\5\35\1\257\23\35\26\0\2\35\7\0"+
    "\3\35\4\0\11\35\1\260\17\35\26\0\2\35\7\0"+
    "\3\35\4\0\1\35\1\261\27\35\26\0\2\35\7\0"+
    "\3\35\4\0\5\35\1\262\23\35\26\0\2\35\7\0"+
    "\3\35\4\0\11\35\1\263\17\35\26\0\2\35\7\0"+
    "\3\35\4\0\5\35\1\206\23\35\26\0\2\35\7\0"+
    "\3\35\4\0\5\35\1\264\23\35\26\0\2\35\7\0"+
    "\3\35\4\0\5\35\1\151\23\35\5\0\1\244\2\0"+
    "\1\244\1\0\1\244\37\0\1\265\4\0\1\266\2\0"+
    "\1\267\73\0\1\270\45\0\2\35\7\0\3\35\4\0"+
    "\22\35\1\271\6\35\5\0\1\272\2\0\1\272\1\0"+
    "\1\272\13\0\2\35\7\0\3\35\4\0\31\35\26\0"+
    "\2\35\7\0\3\35\4\0\4\35\1\273\24\35\26\0"+
    "\2\35\7\0\3\35\4\0\6\35\1\274\22\35\71\0"+
    "\1\275\67\0\1\276\106\0\1\277\32\0\2\35\7\0"+
    "\3\35\4\0\23\35\1\300\5\35\26\0\2\35\7\0"+
    "\3\35\4\0\17\35\1\301\11\35\26\0\2\35\7\0"+
    "\3\35\4\0\16\35\1\206\12\35\26\0\2\35\7\0"+
    "\3\35\4\0\24\35\1\302\4\35\26\0\2\35\7\0"+
    "\3\35\4\0\16\35\1\303\12\35\26\0\2\35\7\0"+
    "\3\35\4\0\23\35\1\304\5\35\65\0\1\305\75\0"+
    "\1\306\77\0\1\307\75\0\1\310\40\0\2\35\7\0"+
    "\3\35\4\0\5\35\1\311\23\35\5\0\1\272\2\0"+
    "\1\272\1\0\1\272\44\0\1\266\24\0\1\312\2\0"+
    "\1\312\1\0\1\312\13\0\2\35\7\0\3\35\4\0"+
    "\31\35\26\0\2\35\7\0\3\35\4\0\22\35\1\313"+
    "\6\35\26\0\2\35\7\0\3\35\4\0\5\35\1\314"+
    "\23\35\26\0\2\35\7\0\3\35\4\0\24\35\1\315"+
    "\4\35\73\0\1\316\75\0\1\317\70\0\1\320\106\0"+
    "\1\321\30\0\2\35\7\0\3\35\4\0\23\35\1\322"+
    "\5\35\5\0\1\312\2\0\1\312\1\0\1\312\36\0"+
    "\1\323\5\0\1\266\2\0\1\324\6\0\1\325\17\0"+
    "\1\326\13\0\2\35\7\0\3\35\4\0\31\35\12\0"+
    "\1\327\13\0\2\35\7\0\3\35\4\0\31\35\50\0"+
    "\1\330\103\0\1\331\70\0\1\332\105\0\1\333\105\0"+
    "\1\334\67\0\1\335\70\0\1\336\76\0\1\337\110\0"+
    "\1\340\21\0\1\272\2\0\1\272\1\0\1\272\154\0"+
    "\1\341\55\0\1\342\113\0\1\343\77\0\1\344\64\0"+
    "\1\345\76\0\1\346\76\0\1\317\102\0\1\347\107\0"+
    "\1\317\63\0\1\350\111\0\1\351\64\0\1\352\76\0"+
    "\1\353\67\0\1\354\34\0\1\355\2\0\1\355\1\0"+
    "\1\355\156\0\1\331\53\0\1\356\76\0\1\357\113\0"+
    "\1\360\17\0\1\355\2\0\1\355\1\0\1\355\44\0"+
    "\1\266\2\0\1\267\110\0\1\361\76\0\1\362\74\0"+
    "\1\363\63\0\1\364\76\0\1\365\104\0\1\366\76\0"+
    "\1\367\101\0\1\370\76\0\1\371\77\0\1\372\76\0"+
    "\1\373\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12663];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\2\1\1\11\3\1\1\11\1\1\5\11"+
    "\1\1\1\11\2\1\2\11\3\1\1\11\1\1\1\11"+
    "\1\1\1\11\16\1\1\11\1\1\2\0\1\11\1\0"+
    "\1\1\1\11\1\0\2\1\1\0\1\11\2\1\2\11"+
    "\5\0\1\11\21\1\5\11\2\0\1\11\6\0\25\1"+
    "\2\11\3\0\1\11\2\0\23\1\4\0\1\11\12\1"+
    "\2\0\4\1\1\0\1\11\2\0\7\1\4\0\1\1"+
    "\1\0\2\1\3\11\5\1\4\0\1\1\1\0\3\1"+
    "\1\0\1\11\2\0\1\1\6\0\1\1\16\0\1\1"+
    "\12\0\1\11\6\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuilder builder = new StringBuilder();
    int currentAnnotation = -1;
    Queue<Symbol> symbols = new ArrayDeque<>();
    boolean pred_start = false;
    LogManager logger;

    private Symbol symbol(int type) {
      return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
      return new Symbol(type, yyline, yycolumn, value);
    }

    public Symbol getNext() throws IOException {
      if (symbols.isEmpty()) {
        bufferNextAnnotation();
        currentAnnotation++;
      }
      if (!symbols.isEmpty()) {
        return symbols.poll();
      } else {
        return symbol(ACSLSymbols.EOF);
      }
    }

    private void bufferNextAnnotation() throws IOException {
      Symbol token = next_token();
      if (token.sym == ACSLSymbols.EOF) {
        return;
      }
      symbols.add(symbol(ACSLSymbols.NEXTCONTRACT));
      boolean invalidAnnotation = false;

      while (token.sym != ACSLSymbols.EOF && token.sym != ACSLSymbols.ANNOTATION_END) {
        if (token.sym == ACSLSymbols.SYNTAXERROR) {
          logger.logf(
              Level.INFO, "Unsupported character: <%s>. Ignoring current annotation", yytext());
          invalidAnnotation = true;
        }
        symbols.add(token);
        if (pred_start) {
          symbols.add(symbol(ACSLSymbols.PRED_START));
          pred_start = false;
        }
        token = next_token();
      }
      symbols.add(symbol(ACSLSymbols.ANNOTATION_END));
      assert !pred_start;

      if (invalidAnnotation) {
        symbols.clear();
        symbols.add(symbol(ACSLSymbols.SYNTAXERROR));
      }
    }

    public int getCurrentAnnotation() {
      return currentAnnotation;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ACSLScanner(java.io.Reader in, LogManager pLogger) {
    logger = pLogger;
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(ACSLSymbols.EOF, yytext());
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* do nothing */
            }
            // fall through
          case 60: break;
          case 2:
            { return symbol(ACSLSymbols.SYNTAXERROR);
            }
            // fall through
          case 61: break;
          case 3:
            { yybegin(YYINITIAL); return symbol(ACSLSymbols.ANNOTATION_END);
            }
            // fall through
          case 62: break;
          case 4:
            { pred_start = true; return symbol(ACSLSymbols.NEG);
            }
            // fall through
          case 63: break;
          case 5:
            { return symbol(ACSLSymbols.MOD);
            }
            // fall through
          case 64: break;
          case 6:
            { return symbol(ACSLSymbols.AMPERSAND);
            }
            // fall through
          case 65: break;
          case 7:
            { pred_start = true; return symbol(ACSLSymbols.LPAREN);
            }
            // fall through
          case 66: break;
          case 8:
            { return symbol(ACSLSymbols.RPAREN);
            }
            // fall through
          case 67: break;
          case 9:
            { return symbol(ACSLSymbols.STAR);
            }
            // fall through
          case 68: break;
          case 10:
            { return symbol(ACSLSymbols.PLUS);
            }
            // fall through
          case 69: break;
          case 11:
            { return symbol(ACSLSymbols.COMMA);
            }
            // fall through
          case 70: break;
          case 12:
            { return symbol(ACSLSymbols.MINUS);
            }
            // fall through
          case 71: break;
          case 13:
            { return symbol(ACSLSymbols.DIVIDE);
            }
            // fall through
          case 72: break;
          case 14:
            { builder.setLength(0); String matched = yytext().toLowerCase();
                        while (matched.endsWith("u") || matched.endsWith("l")) {
                          matched = matched.substring(0, matched.length() - 1);
                        }
                        return symbol(ACSLSymbols.LITERAL, new BigInteger(builder.append(matched).toString()));
            }
            // fall through
          case 73: break;
          case 15:
            { pred_start = true; return symbol(ACSLSymbols.COLON);
            }
            // fall through
          case 74: break;
          case 16:
            { pred_start = true; return symbol(ACSLSymbols.SEMI);
            }
            // fall through
          case 75: break;
          case 17:
            { return symbol(ACSLSymbols.LT);
            }
            // fall through
          case 76: break;
          case 18:
            { return symbol(ACSLSymbols.GT);
            }
            // fall through
          case 77: break;
          case 19:
            { pred_start = true; return symbol(ACSLSymbols.QUESTION);
            }
            // fall through
          case 78: break;
          case 20:
            { builder.setLength(0);
                        return symbol(ACSLSymbols.IDENTIFIER, builder.append(yytext()).toString());
            }
            // fall through
          case 79: break;
          case 21:
            { return symbol(ACSLSymbols.LBRACKET);
            }
            // fall through
          case 80: break;
          case 22:
            { return symbol(ACSLSymbols.RBRACKET);
            }
            // fall through
          case 81: break;
          case 23:
            { return symbol(ACSLSymbols.BXOR);
            }
            // fall through
          case 82: break;
          case 24:
            { return symbol(ACSLSymbols.BOR);
            }
            // fall through
          case 83: break;
          case 25:
            { return symbol(ACSLSymbols.BNEG);
            }
            // fall through
          case 84: break;
          case 26:
            { return symbol(ACSLSymbols.NEQ);
            }
            // fall through
          case 85: break;
          case 27:
            { builder.setLength(0);
                        return symbol(ACSLSymbols.STRING_LITERAL, builder.append(yytext()).toString());
            }
            // fall through
          case 86: break;
          case 28:
            { pred_start = true; return symbol(ACSLSymbols.AND);
            }
            // fall through
          case 87: break;
          case 29:
            { return symbol(ACSLSymbols.LSHIFT);
            }
            // fall through
          case 88: break;
          case 30:
            { return symbol(ACSLSymbols.LEQ);
            }
            // fall through
          case 89: break;
          case 31:
            { return symbol(ACSLSymbols.EQ);
            }
            // fall through
          case 90: break;
          case 32:
            { return symbol(ACSLSymbols.GEQ);
            }
            // fall through
          case 91: break;
          case 33:
            { return symbol(ACSLSymbols.RSHIFT);
            }
            // fall through
          case 92: break;
          case 34:
            { pred_start = true; return symbol(ACSLSymbols.XOR);
            }
            // fall through
          case 93: break;
          case 35:
            { pred_start = true; return symbol(ACSLSymbols.OR);
            }
            // fall through
          case 94: break;
          case 36:
            { yybegin(MULTI_LINE_ANNOTATION);
            }
            // fall through
          case 95: break;
          case 37:
            { yybegin(SINGLE_LINE_ANNOTATION);
            }
            // fall through
          case 96: break;
          case 38:
            { return symbol(ACSLSymbols.BIMP);
            }
            // fall through
          case 97: break;
          case 39:
            { pred_start = true; return symbol(ACSLSymbols.IMP);
            }
            // fall through
          case 98: break;
          case 40:
            { return symbol(ACSLSymbols.FOR);
            }
            // fall through
          case 99: break;
          case 41:
            { builder.setLength(0);
                        return symbol(ACSLSymbols.TYPE, new ACSLType(builder.append(yytext()).toString()));
            }
            // fall through
          case 100: break;
          case 42:
            { return symbol(ACSLSymbols.BEQV);
            }
            // fall through
          case 101: break;
          case 43:
            { pred_start = true; return symbol(ACSLSymbols.EQV);
            }
            // fall through
          case 102: break;
          case 44:
            { return symbol(ACSLSymbols.OLD);
            }
            // fall through
          case 103: break;
          case 45:
            { return symbol(ACSLSymbols.TRUE);
            }
            // fall through
          case 104: break;
          case 46:
            { pred_start = true; return symbol(ACSLSymbols.CHECK);
            }
            // fall through
          case 105: break;
          case 47:
            { return symbol(ACSLSymbols.FALSE);
            }
            // fall through
          case 106: break;
          case 48:
            { pred_start = true; return symbol(ACSLSymbols.ASSERT);
            }
            // fall through
          case 107: break;
          case 49:
            { return symbol(ACSLSymbols.SIZEOF);
            }
            // fall through
          case 108: break;
          case 50:
            { return symbol(ACSLSymbols.EXISTS);
            }
            // fall through
          case 109: break;
          case 51:
            { return symbol(ACSLSymbols.FORALL);
            }
            // fall through
          case 110: break;
          case 52:
            { return symbol(ACSLSymbols.RETVAL);
            }
            // fall through
          case 111: break;
          case 53:
            { pred_start = true; return symbol(ACSLSymbols.ASS);
            }
            // fall through
          case 112: break;
          case 54:
            { pred_start = true; return symbol(ACSLSymbols.ENS);
            }
            // fall through
          case 113: break;
          case 55:
            { return symbol(ACSLSymbols.BEHAVIOR);
            }
            // fall through
          case 114: break;
          case 56:
            { pred_start = true; return symbol(ACSLSymbols.REQ);
            }
            // fall through
          case 115: break;
          case 57:
            { pred_start = true; return symbol(ACSLSymbols.LINVARIANT);
            }
            // fall through
          case 116: break;
          case 58:
            { return symbol(ACSLSymbols.COMPLETE_BEHAVIORS);
            }
            // fall through
          case 117: break;
          case 59:
            { return symbol(ACSLSymbols.DISJOINT_BEHAVIORS);
            }
            // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
