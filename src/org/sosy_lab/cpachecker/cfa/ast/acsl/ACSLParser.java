// ----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
// ----------------------------------------------------

package org.sosy_lab.cpachecker.cfa.ast.acsl;

import com.google.common.collect.FluentIterable;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Multimap;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.logging.Level;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import org.sosy_lab.common.log.LogManager;
import org.sosy_lab.cpachecker.cfa.CFA;
import org.sosy_lab.cpachecker.cfa.CFAWithACSLAnnotations;
import org.sosy_lab.cpachecker.cfa.ast.FileLocation;
import org.sosy_lab.cpachecker.cfa.ast.acsl.util.SyntacticBlock;
import org.sosy_lab.cpachecker.cfa.ast.acsl.util.SyntacticBlockStructure;
import org.sosy_lab.cpachecker.cfa.model.CFAEdge;
import org.sosy_lab.cpachecker.cfa.model.CFANode;
import org.sosy_lab.cpachecker.cfa.model.FunctionEntryNode;
import org.sosy_lab.cpachecker.cfa.model.FunctionExitNode;
import org.sosy_lab.cpachecker.cfa.model.c.CDeclarationEdge;
import org.sosy_lab.cpachecker.exceptions.CParserException;
import org.sosy_lab.cpachecker.util.CFATraversal;
import org.sosy_lab.cpachecker.util.CFATraversal.EdgeCollectingCFAVisitor;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser. */
@javax.annotation.processing.Generated("CUP")
@SuppressWarnings({"all", "cast", "rawtypes", "unchecked"})
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({
  "EI_EXPOSE_REP",
  "MS_PKGPROTECT",
  "SIC_INNER_SHOULD_BE_STATIC"
})
public class ACSLParser extends java_cup.runtime.lr_parser {

  @Override
  public final Class getSymbolContainer() {
    return ACSLSymbols.class;
  }

  /** Default constructor. */
  @Deprecated
  public ACSLParser() {
    super();
  }

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ACSLParser(java_cup.runtime.Scanner s) {
    super(s);
  }

  /** Constructor which sets the default scanner. */
  public ACSLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
    super(s, sf);
  }

  /** Production table. */
  protected static final short _production_table[][] =
      unpackFromStrings(
          new String[] {
            "\000\160\000\002\002\004\000\002\002\004\000\002\002"
                + "\002\000\002\003\004\000\002\003\004\000\002\003\004"
                + "\000\002\003\004\000\002\003\003\000\002\007\007\000"
                + "\002\007\010\000\002\007\007\000\002\007\010\000\002"
                + "\006\005\000\002\006\004\000\002\006\004\000\002\004"
                + "\004\000\002\005\005\000\002\025\006\000\002\026\005"
                + "\000\002\026\003\000\002\024\005\000\002\024\004\000"
                + "\002\022\007\000\002\022\006\000\002\010\006\000\002"
                + "\012\004\000\002\012\002\000\002\013\004\000\002\013"
                + "\002\000\002\015\004\000\002\015\002\000\002\027\007"
                + "\000\002\016\004\000\002\016\002\000\002\023\006\000"
                + "\002\023\005\000\002\023\006\000\002\023\005\000\002"
                + "\011\005\000\002\014\004\000\002\014\002\000\002\017"
                + "\006\000\002\020\006\000\002\021\006\000\002\030\004"
                + "\000\002\030\004\000\002\030\005\000\002\030\006\000"
                + "\002\030\004\000\002\030\004\000\002\030\004\000\002"
                + "\030\005\000\002\030\006\000\002\030\007\000\002\030"
                + "\007\000\002\030\007\000\002\030\007\000\002\031\005"
                + "\000\002\031\005\000\002\031\003\000\002\031\005\000"
                + "\002\032\005\000\002\032\005\000\002\032\003\000\002"
                + "\032\005\000\002\033\005\000\002\033\005\000\002\034"
                + "\005\000\002\035\005\000\002\045\010\000\002\045\006"
                + "\000\002\045\006\000\002\045\004\000\002\036\004\000"
                + "\002\036\003\000\002\036\003\000\002\036\003\000\002"
                + "\036\006\000\002\036\004\000\002\036\006\000\002\036"
                + "\007\000\002\036\005\000\002\036\005\000\002\036\005"
                + "\000\002\036\006\000\002\036\003\000\002\041\003\000"
                + "\002\041\003\000\002\041\003\000\002\041\003\000\002"
                + "\041\003\000\002\037\003\000\002\037\003\000\002\040"
                + "\003\000\002\040\003\000\002\042\003\000\002\042\003"
                + "\000\002\042\003\000\002\042\003\000\002\042\003\000"
                + "\002\042\003\000\002\042\003\000\002\043\003\000\002"
                + "\043\003\000\002\043\003\000\002\043\003\000\002\043"
                + "\003\000\002\044\003\000\002\044\003\000\002\044\003"
                + "\000\002\044\003\000\002\044\003"
          });

  /** Access to production table. */
  @Override
  public short[][] production_table() {
    return _production_table;
  }

  /** Parse-action table. */
  protected static final short[][] _action_table =
      unpackFromStrings(
          new String[] {
            "\000\330\000\010\002\uffff\060\uffff\101\uffff\001\002\000"
                + "\010\002\014\060\013\101\007\001\002\000\010\002\001"
                + "\060\001\101\001\001\002\000\004\100\332\001\002\000"
                + "\010\002\ufffa\060\ufffa\101\ufffa\001\002\000\004\100\331"
                + "\001\002\000\004\100\330\001\002\000\004\100\327\001"
                + "\002\000\026\051\uffe7\052\uffe7\061\021\062\022\063\025"
                + "\064\uffe7\070\016\072\uffe7\073\uffe7\100\uffe7\001\002\000"
                + "\004\002\000\001\002\000\016\051\260\052\uffe5\064\uffe5"
                + "\072\uffe5\073\uffe5\100\uffe5\001\002\000\004\056\140\001"
                + "\002\000\006\070\016\100\ufff4\001\002\000\010\061\227"
                + "\070\016\100\ufff3\001\002\000\004\067\027\001\002\000"
                + "\004\067\027\001\002\000\024\051\uffe7\052\uffe7\061\021"
                + "\062\224\063\223\064\uffe7\072\uffe7\073\uffe7\100\uffe7\001"
                + "\002\000\004\100\ufff2\001\002\000\004\067\027\001\002"
                + "\000\020\010\151\011\154\012\147\013\152\014\155\050"
                + "\221\066\153\001\002\000\046\004\044\005\052\015\036"
                + "\031\057\034\041\035\055\036\030\037\035\040\053\046"
                + "\046\054\045\055\047\056\042\067\034\074\037\075\032"
                + "\076\033\077\054\001\002\000\004\046\216\001\002\000"
                + "\032\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\016\uffc2"
                + "\021\uffc2\022\uffc2\047\uffc2\050\uffc2\065\uffc2\066\uffc2\001"
                + "\002\000\074\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac"
                + "\013\uffac\014\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022"
                + "\uffac\023\uffac\025\uffac\026\uffac\027\uffac\030\uffac\034\uffac"
                + "\035\uffac\037\uffac\040\uffac\042\uffac\043\uffac\044\uffac\045"
                + "\uffac\047\uffac\050\uffac\065\uffac\066\uffac\001\002\000\004"
                + "\057\134\001\002\000\034\031\057\034\041\035\055\036"
                + "\030\037\035\040\053\046\063\054\045\055\047\056\042"
                + "\067\034\074\062\075\032\001\002\000\034\031\uff95\034"
                + "\uff95\035\uff95\036\uff95\037\uff95\040\uff95\046\uff95\054\uff95"
                + "\055\uff95\056\uff95\067\uff95\074\uff95\075\uff95\001\002\000"
                + "\004\067\027\001\002\000\004\046\206\001\002\000\032"
                + "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\016\202\021"
                + "\124\022\123\047\uffcf\050\uffcf\065\uffcf\066\uffcf\001\002"
                + "\000\034\031\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040"
                + "\uff93\046\uff93\054\uff93\055\uff93\056\uff93\067\uff93\074\uff93"
                + "\075\uff93\001\002\000\074\006\uffb5\007\uffb5\010\uffb5\011"
                + "\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\017\uffb5\020\uffb5"
                + "\021\uffb5\022\uffb5\023\uffb5\025\uffb5\026\uffb5\027\uffb5\030"
                + "\uffb5\034\uffb5\035\uffb5\037\uffb5\040\uffb5\042\uffb5\043\uffb5"
                + "\044\uffb5\045\uffb5\047\uffb5\050\uffb5\065\uffb5\066\uffb5\001"
                + "\002\000\032\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0"
                + "\016\176\020\125\023\121\047\uffd0\050\uffd0\065\uffd0\066"
                + "\uffd0\001\002\000\024\010\uffd5\011\uffd5\012\uffd5\013\uffd5"
                + "\014\uffd5\047\uffd5\050\uffd5\065\uffd5\066\uffd5\001\002\000"
                + "\074\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7"
                + "\014\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023"
                + "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\034\uffb7\035\uffb7"
                + "\037\uffb7\040\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\047"
                + "\uffb7\050\uffb7\065\uffb7\066\uffb7\001\002\000\034\031\057"
                + "\034\041\035\055\036\030\037\035\040\053\046\063\054"
                + "\045\055\047\056\042\067\173\074\062\075\032\001\002"
                + "\000\074\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013"
                + "\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6"
                + "\023\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\034\uffb6\035"
                + "\uffb6\037\uffb6\040\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6"
                + "\047\uffb6\050\uffb6\065\uffb6\066\uffb6\001\002\000\032\010"
                + "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\016\uffc6\020\uffc6"
                + "\023\uffc6\047\uffc6\050\uffc6\065\uffc6\066\uffc6\001\002\000"
                + "\050\006\107\016\164\017\165\020\125\021\124\022\123"
                + "\023\121\025\077\026\100\027\105\030\104\034\101\035"
                + "\110\037\102\040\072\042\074\043\076\044\075\045\073"
                + "\001\002\000\024\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014"
                + "\uffd4\047\uffd4\050\uffd4\065\uffd4\066\uffd4\001\002\000\034"
                + "\031\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040\uff94\046"
                + "\uff94\054\uff94\055\uff94\056\uff94\067\uff94\074\uff94\075\uff94"
                + "\001\002\000\004\057\134\001\002\000\034\031\uff92\034"
                + "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\046\uff92\054\uff92"
                + "\055\uff92\056\uff92\067\uff92\074\uff92\075\uff92\001\002\000"
                + "\036\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\016\122"
                + "\020\125\021\124\022\123\023\121\047\uffd1\050\uffd1\065"
                + "\uffd1\066\uffd1\001\002\000\034\031\uff96\034\uff96\035\uff96"
                + "\036\uff96\037\uff96\040\uff96\046\uff96\054\uff96\055\uff96\056"
                + "\uff96\067\uff96\074\uff96\075\uff96\001\002\000\034\031\057"
                + "\034\041\035\055\036\030\037\035\040\053\046\063\054"
                + "\045\055\047\056\042\067\034\074\062\075\032\001\002"
                + "\000\074\006\107\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013"
                + "\uffb3\014\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3"
                + "\023\uffb3\025\077\026\100\027\105\030\104\034\101\035"
                + "\110\037\102\040\072\042\074\043\076\044\075\045\073"
                + "\047\uffb3\050\uffb3\065\uffb3\066\uffb3\001\002\000\004\046"
                + "\116\001\002\000\034\031\057\034\041\035\055\036\030"
                + "\037\035\040\053\046\063\054\045\055\047\056\042\067"
                + "\065\074\062\075\032\001\002\000\036\006\107\025\077"
                + "\026\100\027\105\030\104\034\101\035\110\037\102\040"
                + "\072\042\074\043\076\044\075\045\073\047\115\001\002"
                + "\000\036\031\057\034\041\035\055\036\030\037\035\040"
                + "\053\046\063\054\045\055\047\056\042\057\067\067\034"
                + "\074\062\075\032\001\002\000\074\006\107\007\uffb8\010"
                + "\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\016\uffb8\017\uffb8"
                + "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\025\077\026\100\027"
                + "\105\030\104\034\101\035\110\037\102\040\072\042\074"
                + "\043\076\044\075\045\073\047\uffb8\050\uffb8\065\uffb8\066"
                + "\uffb8\001\002\000\004\047\070\001\002\000\034\031\057"
                + "\034\041\035\055\036\030\037\035\040\053\046\063\054"
                + "\045\055\047\056\042\067\034\074\062\075\032\001\002"
                + "\000\074\006\107\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013"
                + "\uffb1\014\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1"
                + "\023\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\034\101\035"
                + "\110\037\uffb1\040\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1"
                + "\047\uffb1\050\uffb1\065\uffb1\066\uffb1\001\002\000\034\031"
                + "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\046\uffa1"
                + "\054\uffa1\055\uffa1\056\uffa1\067\uffa1\074\uffa1\075\uffa1\001"
                + "\002\000\034\031\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c"
                + "\040\uff9c\046\uff9c\054\uff9c\055\uff9c\056\uff9c\067\uff9c\074"
                + "\uff9c\075\uff9c\001\002\000\034\031\uff9f\034\uff9f\035\uff9f"
                + "\036\uff9f\037\uff9f\040\uff9f\046\uff9f\054\uff9f\055\uff9f\056"
                + "\uff9f\067\uff9f\074\uff9f\075\uff9f\001\002\000\034\031\uff9d"
                + "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\046\uff9d\054"
                + "\uff9d\055\uff9d\056\uff9d\067\uff9d\074\uff9d\075\uff9d\001\002"
                + "\000\034\031\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040"
                + "\uff9e\046\uff9e\054\uff9e\055\uff9e\056\uff9e\067\uff9e\074\uff9e"
                + "\075\uff9e\001\002\000\034\031\uff9a\034\uff9a\035\uff9a\036"
                + "\uff9a\037\uff9a\040\uff9a\046\uff9a\054\uff9a\055\uff9a\056\uff9a"
                + "\067\uff9a\074\uff9a\075\uff9a\001\002\000\034\031\uff99\034"
                + "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\046\uff99\054\uff99"
                + "\055\uff99\056\uff99\067\uff99\074\uff99\075\uff99\001\002\000"
                + "\034\031\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0"
                + "\046\uffa0\054\uffa0\055\uffa0\056\uffa0\067\uffa0\074\uffa0\075"
                + "\uffa0\001\002\000\034\031\uffa2\034\uffa2\035\uffa2\036\uffa2"
                + "\037\uffa2\040\uffa2\046\uffa2\054\uffa2\055\uffa2\056\uffa2\067"
                + "\uffa2\074\uffa2\075\uffa2\001\002\000\034\031\057\034\041"
                + "\035\055\036\030\037\035\040\053\046\063\054\045\055"
                + "\047\056\042\067\034\074\062\075\032\001\002\000\034"
                + "\031\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\046"
                + "\uff97\054\uff97\055\uff97\056\uff97\067\uff97\074\uff97\075\uff97"
                + "\001\002\000\034\031\uff98\034\uff98\035\uff98\036\uff98\037"
                + "\uff98\040\uff98\046\uff98\054\uff98\055\uff98\056\uff98\067\uff98"
                + "\074\uff98\075\uff98\001\002\000\034\031\057\034\041\035"
                + "\055\036\030\037\035\040\053\046\063\054\045\055\047"
                + "\056\042\067\034\074\062\075\032\001\002\000\034\031"
                + "\057\034\041\035\055\036\030\037\035\040\053\046\063"
                + "\054\045\055\047\056\042\067\034\074\062\075\032\001"
                + "\002\000\034\031\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b"
                + "\040\uff9b\046\uff9b\054\uff9b\055\uff9b\056\uff9b\067\uff9b\074"
                + "\uff9b\075\uff9b\001\002\000\036\006\107\007\112\025\077"
                + "\026\100\027\105\030\104\034\101\035\110\037\102\040"
                + "\072\042\074\043\076\044\075\045\073\001\002\000\074"
                + "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014"
                + "\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4"
                + "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\034\uffb4\035\uffb4\037"
                + "\uffb4\040\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\047\uffb4"
                + "\050\uffb4\065\uffb4\066\uffb4\001\002\000\074\006\107\007"
                + "\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\016\uffaf"
                + "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\025\077\026"
                + "\100\027\105\030\104\034\101\035\110\037\102\040\072"
                + "\042\074\043\076\044\075\045\073\047\uffaf\050\uffaf\065"
                + "\uffaf\066\uffaf\001\002\000\074\006\107\007\uffb0\010\uffb0"
                + "\011\uffb0\012\uffb0\013\uffb0\014\uffb0\016\uffb0\017\uffb0\020"
                + "\uffb0\021\uffb0\022\uffb0\023\uffb0\025\077\026\100\027\105"
                + "\030\104\034\101\035\110\037\102\040\072\042\074\043"
                + "\076\044\075\045\073\047\uffb0\050\uffb0\065\uffb0\066\uffb0"
                + "\001\002\000\074\006\uffae\007\uffae\010\uffae\011\uffae\012"
                + "\uffae\013\uffae\014\uffae\016\uffae\017\uffae\020\uffae\021\uffae"
                + "\022\uffae\023\uffae\025\uffae\026\uffae\027\uffae\030\uffae\034"
                + "\uffae\035\uffae\037\uffae\040\uffae\042\uffae\043\uffae\044\uffae"
                + "\045\uffae\047\uffae\050\uffae\065\uffae\066\uffae\001\002\000"
                + "\034\031\057\034\041\035\055\036\030\037\035\040\053"
                + "\046\063\054\045\055\047\056\042\067\034\074\062\075"
                + "\032\001\002\000\036\006\107\025\077\026\100\027\105"
                + "\030\104\034\101\035\110\037\102\040\072\042\074\043"
                + "\076\044\075\045\073\047\120\001\002\000\074\006\uffad"
                + "\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\016"
                + "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\025\uffad"
                + "\026\uffad\027\uffad\030\uffad\034\uffad\035\uffad\037\uffad\040"
                + "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\047\uffad\050\uffad"
                + "\065\uffad\066\uffad\001\002\000\034\031\uffa5\034\uffa5\035"
                + "\uffa5\036\uffa5\037\uffa5\040\uffa5\046\uffa5\054\uffa5\055\uffa5"
                + "\056\uffa5\067\uffa5\074\uffa5\075\uffa5\001\002\000\034\031"
                + "\057\034\041\035\055\036\030\037\035\040\053\046\063"
                + "\054\045\055\047\056\042\067\034\074\062\075\032\001"
                + "\002\000\034\031\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4"
                + "\040\uffa4\046\uffa4\054\uffa4\055\uffa4\056\uffa4\067\uffa4\074"
                + "\uffa4\075\uffa4\001\002\000\034\031\uffa3\034\uffa3\035\uffa3"
                + "\036\uffa3\037\uffa3\040\uffa3\046\uffa3\054\uffa3\055\uffa3\056"
                + "\uffa3\067\uffa3\074\uffa3\075\uffa3\001\002\000\034\031\uffa6"
                + "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\046\uffa6\054"
                + "\uffa6\055\uffa6\056\uffa6\067\uffa6\074\uffa6\075\uffa6\001\002"
                + "\000\034\031\057\034\041\035\055\036\030\037\035\040"
                + "\053\046\063\054\045\055\047\056\042\067\034\074\062"
                + "\075\032\001\002\000\034\031\057\034\041\035\055\036"
                + "\030\037\035\040\053\046\063\054\045\055\047\056\042"
                + "\067\034\074\062\075\032\001\002\000\064\006\107\010"
                + "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5\020\uffc5"
                + "\023\uffc5\025\077\026\100\027\105\030\104\034\101\035"
                + "\110\037\102\040\072\042\074\043\076\044\075\045\073"
                + "\047\uffc5\050\uffc5\065\uffc5\066\uffc5\001\002\000\064\006"
                + "\107\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\016\uffc1"
                + "\021\uffc1\022\uffc1\025\077\026\100\027\105\030\104\034"
                + "\101\035\110\037\102\040\072\042\074\043\076\044\075"
                + "\045\073\047\uffc1\050\uffc1\065\uffc1\066\uffc1\001\002\000"
                + "\070\006\107\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0"
                + "\016\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\025\077\026"
                + "\100\027\105\030\104\034\101\035\110\037\102\040\072"
                + "\042\074\043\076\044\075\045\073\047\uffc0\050\uffc0\065"
                + "\uffc0\066\uffc0\001\002\000\004\050\145\001\002\000\004"
                + "\056\135\001\002\000\006\050\uffb9\071\136\001\002\000"
                + "\006\056\140\057\134\001\002\000\006\050\uffba\071\142"
                + "\001\002\000\010\050\uffee\065\uffee\071\uffee\001\002\000"
                + "\004\050\uffbb\001\002\000\006\056\143\057\134\001\002"
                + "\000\010\050\uffef\065\uffef\071\uffef\001\002\000\004\050"
                + "\uffbc\001\002\000\004\067\027\001\002\000\024\010\151"
                + "\011\154\012\147\013\152\014\155\047\uffca\050\uffca\065"
                + "\uffca\066\153\001\002\000\004\067\uffa9\001\002\000\004"
                + "\067\027\001\002\000\004\067\uffab\001\002\000\004\067"
                + "\uffa8\001\002\000\004\067\027\001\002\000\004\067\uffaa"
                + "\001\002\000\004\067\uffa7\001\002\000\020\010\151\011"
                + "\154\012\147\013\152\014\155\065\157\066\153\001\002"
                + "\000\004\067\027\001\002\000\024\010\151\011\154\012"
                + "\147\013\152\014\155\047\uffcc\050\uffcc\065\uffcc\066\153"
                + "\001\002\000\024\010\151\011\154\012\147\013\152\014"
                + "\155\047\uffd3\050\uffd3\065\uffd3\066\153\001\002\000\034"
                + "\031\057\034\041\035\055\036\030\037\035\040\053\046"
                + "\063\054\045\055\047\056\042\067\034\074\062\075\032"
                + "\001\002\000\034\031\057\034\041\035\055\036\030\037"
                + "\035\040\053\046\063\054\045\055\047\056\042\067\034"
                + "\074\062\075\032\001\002\000\034\031\057\034\041\035"
                + "\055\036\030\037\035\040\053\046\063\054\045\055\047"
                + "\056\042\067\034\074\062\075\032\001\002\000\034\031"
                + "\057\034\041\035\055\036\030\037\035\040\053\046\063"
                + "\054\045\055\047\056\042\067\034\074\062\075\032\001"
                + "\002\000\056\006\107\010\uffd2\011\uffd2\012\uffd2\013\uffd2"
                + "\014\uffd2\025\077\026\100\027\105\030\104\034\101\035"
                + "\110\037\102\040\072\042\074\043\076\044\075\045\073"
                + "\047\uffd2\050\uffd2\065\uffd2\066\uffd2\001\002\000\070\006"
                + "\107\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\016\uffbf"
                + "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\025\077\026\100\027"
                + "\105\030\104\034\101\035\110\037\102\040\072\042\074"
                + "\043\076\044\075\045\073\047\uffbf\050\uffbf\065\uffbf\066"
                + "\uffbf\001\002\000\064\006\107\010\uffbe\011\uffbe\012\uffbe"
                + "\013\uffbe\014\uffbe\016\uffbe\020\uffbe\023\uffbe\025\077\026"
                + "\100\027\105\030\104\034\101\035\110\037\102\040\072"
                + "\042\074\043\076\044\075\045\073\047\uffbe\050\uffbe\065"
                + "\uffbe\066\uffbe\001\002\000\064\006\107\010\uffbd\011\uffbd"
                + "\012\uffbd\013\uffbd\014\uffbd\016\uffbd\021\uffbd\022\uffbd\025"
                + "\077\026\100\027\105\030\104\034\101\035\110\037\102"
                + "\040\072\042\074\043\076\044\075\045\073\047\uffbd\050"
                + "\uffbd\065\uffbd\066\uffbd\001\002\000\020\010\151\011\154"
                + "\012\147\013\152\014\155\047\175\066\153\001\002\000"
                + "\050\004\044\005\052\015\036\031\057\034\041\035\055"
                + "\036\030\037\035\040\053\046\046\054\045\055\047\056"
                + "\042\057\067\067\034\074\037\075\032\076\033\077\054"
                + "\001\002\000\052\006\107\016\164\017\165\020\125\021"
                + "\124\022\123\023\121\025\077\026\100\027\105\030\104"
                + "\034\101\035\110\037\102\040\072\042\074\043\076\044"
                + "\075\045\073\047\uffb8\001\002\000\024\010\uffcd\011\uffcd"
                + "\012\uffcd\013\uffcd\014\uffcd\047\uffcd\050\uffcd\065\uffcd\066"
                + "\uffcd\001\002\000\034\031\057\034\041\035\055\036\030"
                + "\037\035\040\053\046\063\054\045\055\047\056\042\067"
                + "\034\074\062\075\032\001\002\000\034\031\057\034\041"
                + "\035\055\036\030\037\035\040\053\046\063\054\045\055"
                + "\047\056\042\067\034\074\062\075\032\001\002\000\064"
                + "\006\107\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\016"
                + "\uffc8\020\uffc8\023\uffc8\025\077\026\100\027\105\030\104"
                + "\034\101\035\110\037\102\040\072\042\074\043\076\044"
                + "\075\045\073\047\uffc8\050\uffc8\065\uffc8\066\uffc8\001\002"
                + "\000\064\006\107\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014"
                + "\uffc7\016\uffc7\020\uffc7\023\uffc7\025\077\026\100\027\105"
                + "\030\104\034\101\035\110\037\102\040\072\042\074\043"
                + "\076\044\075\045\073\047\uffc7\050\uffc7\065\uffc7\066\uffc7"
                + "\001\002\000\034\031\057\034\041\035\055\036\030\037"
                + "\035\040\053\046\063\054\045\055\047\056\042\067\034"
                + "\074\062\075\032\001\002\000\034\031\057\034\041\035"
                + "\055\036\030\037\035\040\053\046\063\054\045\055\047"
                + "\056\042\067\034\074\062\075\032\001\002\000\064\006"
                + "\107\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\016\uffc4"
                + "\021\uffc4\022\uffc4\025\077\026\100\027\105\030\104\034"
                + "\101\035\110\037\102\040\072\042\074\043\076\044\075"
                + "\045\073\047\uffc4\050\uffc4\065\uffc4\066\uffc4\001\002\000"
                + "\064\006\107\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3"
                + "\016\uffc3\021\uffc3\022\uffc3\025\077\026\100\027\105\030"
                + "\104\034\101\035\110\037\102\040\072\042\074\043\076"
                + "\044\075\045\073\047\uffc3\050\uffc3\065\uffc3\066\uffc3\001"
                + "\002\000\034\031\057\034\041\035\055\036\030\037\035"
                + "\040\053\046\063\054\045\055\047\056\042\067\210\074"
                + "\062\075\032\001\002\000\020\010\151\011\154\012\147"
                + "\013\152\014\155\047\211\066\153\001\002\000\046\004"
                + "\044\005\052\015\036\031\057\034\041\035\055\036\030"
                + "\037\035\040\053\046\046\054\045\055\047\056\042\067"
                + "\034\074\037\075\032\076\033\077\054\001\002\000\024"
                + "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\047\uffc9\050"
                + "\uffc9\065\uffc9\066\uffc9\001\002\000\024\010\uffce\011\uffce"
                + "\012\uffce\013\uffce\014\uffce\047\uffce\050\uffce\065\uffce\066"
                + "\uffce\001\002\000\004\050\214\001\002\000\004\067\027"
                + "\001\002\000\024\010\151\011\154\012\147\013\152\014"
                + "\155\047\uffcb\050\uffcb\065\uffcb\066\153\001\002\000\034"
                + "\031\057\034\041\035\055\036\030\037\035\040\053\046"
                + "\063\054\045\055\047\056\042\067\034\074\062\075\032"
                + "\001\002\000\036\006\107\025\077\026\100\027\105\030"
                + "\104\034\101\035\110\037\102\040\072\042\074\043\076"
                + "\044\075\045\073\047\220\001\002\000\074\006\uffb2\007"
                + "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2"
                + "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\025\uffb2\026"
                + "\uffb2\027\uffb2\030\uffb2\034\uffb2\035\uffb2\037\uffb2\040\uffb2"
                + "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\047\uffb2\050\uffb2\065"
                + "\uffb2\066\uffb2\001\002\000\004\067\222\001\002\000\004"
                + "\100\ufff7\001\002\000\004\067\027\001\002\000\004\067"
                + "\027\001\002\000\010\061\227\070\uffec\100\uffec\001\002"
                + "\000\004\100\ufff1\001\002\000\004\067\027\001\002\000"
                + "\020\010\151\011\154\012\147\013\152\014\155\050\231"
                + "\066\153\001\002\000\004\067\232\001\002\000\010\061"
                + "\uffeb\070\uffeb\100\uffeb\001\002\000\020\010\151\011\154"
                + "\012\147\013\152\014\155\050\234\066\153\001\002\000"
                + "\004\067\235\001\002\000\004\100\ufff8\001\002\000\020"
                + "\010\151\011\154\012\147\013\152\014\155\050\237\066"
                + "\153\001\002\000\004\067\240\001\002\000\004\100\ufff6"
                + "\001\002\000\020\010\151\011\154\012\147\013\152\014"
                + "\155\050\242\066\153\001\002\000\004\067\243\001\002"
                + "\000\004\100\ufff9\001\002\000\020\010\151\011\154\012"
                + "\147\013\152\014\155\050\245\066\153\001\002\000\004"
                + "\067\246\001\002\000\010\061\uffea\070\uffea\100\uffea\001"
                + "\002\000\004\061\021\001\002\000\006\070\016\100\ufff5"
                + "\001\002\000\004\061\021\001\002\000\010\061\227\070"
                + "\uffed\100\uffed\001\002\000\006\065\255\071\254\001\002"
                + "\000\004\056\143\001\002\000\004\067\256\001\002\000"
                + "\024\051\ufff0\052\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0"
                + "\072\ufff0\073\ufff0\100\ufff0\001\002\000\014\052\266\064"
                + "\uffe3\072\uffe3\073\uffe3\100\uffe3\001\002\000\004\067\027"
                + "\001\002\000\016\051\uffe8\052\uffe8\064\uffe8\072\uffe8\073"
                + "\uffe8\100\uffe8\001\002\000\020\010\151\011\154\012\147"
                + "\013\152\014\155\050\263\066\153\001\002\000\004\067"
                + "\264\001\002\000\016\051\uffd8\052\uffd8\064\uffd8\072\uffd8"
                + "\073\uffd8\100\uffd8\001\002\000\012\064\273\072\uffe0\073"
                + "\uffe0\100\uffe0\001\002\000\004\067\027\001\002\000\014"
                + "\052\uffe6\064\uffe6\072\uffe6\073\uffe6\100\uffe6\001\002\000"
                + "\020\010\151\011\154\012\147\013\152\014\155\050\271"
                + "\066\153\001\002\000\004\067\272\001\002\000\014\052"
                + "\uffd7\064\uffd7\072\uffd7\073\uffd7\100\uffd7\001\002\000\004"
                + "\056\313\001\002\000\012\064\uffe4\072\uffe4\073\uffe4\100"
                + "\uffe4\001\002\000\010\072\300\073\276\100\uffe9\001\002"
                + "\000\006\050\307\056\140\001\002\000\010\072\uffe1\073"
                + "\uffe1\100\uffe1\001\002\000\006\050\302\056\140\001\002"
                + "\000\006\050\304\071\254\001\002\000\004\067\303\001"
                + "\002\000\010\072\uffde\073\uffde\100\uffde\001\002\000\004"
                + "\067\305\001\002\000\010\072\uffdf\073\uffdf\100\uffdf\001"
                + "\002\000\006\050\311\071\254\001\002\000\004\067\310"
                + "\001\002\000\010\072\uffdc\073\uffdc\100\uffdc\001\002\000"
                + "\004\067\312\001\002\000\010\072\uffdd\073\uffdd\100\uffdd"
                + "\001\002\000\004\065\314\001\002\000\004\067\315\001"
                + "\002\000\020\051\uffd9\052\uffd9\053\uffd9\064\uffd9\072\uffd9"
                + "\073\uffd9\100\uffd9\001\002\000\020\051\uffe7\052\uffe7\053"
                + "\322\064\uffe7\072\uffe7\073\uffe7\100\uffe7\001\002\000\012"
                + "\064\uffe2\072\uffe2\073\uffe2\100\uffe2\001\002\000\020\051"
                + "\uffda\052\uffda\053\uffda\064\uffda\072\uffda\073\uffda\100\uffda"
                + "\001\002\000\016\051\260\052\uffe5\064\uffe5\072\uffe5\073"
                + "\uffe5\100\uffe5\001\002\000\004\067\027\001\002\000\020"
                + "\010\151\011\154\012\147\013\152\014\155\050\324\066"
                + "\153\001\002\000\004\067\325\001\002\000\020\051\uffd6"
                + "\052\uffd6\053\uffd6\064\uffd6\072\uffd6\073\uffd6\100\uffd6\001"
                + "\002\000\014\052\266\064\uffdb\072\uffdb\073\uffdb\100\uffdb"
                + "\001\002\000\010\002\ufffc\060\ufffc\101\ufffc\001\002\000"
                + "\010\002\ufffd\060\ufffd\101\ufffd\001\002\000\010\002\ufffe"
                + "\060\ufffe\101\ufffe\001\002\000\010\002\ufffb\060\ufffb\101"
                + "\ufffb\001\002"
          });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {
    return _action_table;
  }

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
      unpackFromStrings(
          new String[] {
            "\000\330\000\004\002\003\001\001\000\014\003\004\004"
                + "\007\005\010\006\011\007\005\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\014\010\023\012\014"
                + "\022\017\024\016\025\022\001\001\000\002\001\001\000"
                + "\006\013\256\017\260\001\001\000\004\026\252\001\001"
                + "\000\004\025\250\001\001\000\006\024\247\025\246\001"
                + "\001\000\004\030\243\001\001\000\004\030\240\001\001"
                + "\000\010\010\225\012\014\022\224\001\001\000\002\001"
                + "\001\000\004\030\025\001\001\000\004\041\147\001\001"
                + "\000\020\031\042\032\037\033\055\034\047\035\030\036"
                + "\050\044\057\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\004\045\212\001\001\000\006\036"
                + "\065\044\057\001\001\000\002\001\001\000\004\030\211"
                + "\001\001\000\002\001\001\000\004\040\202\001\001\000"
                + "\002\001\001\000\002\001\001\000\004\037\176\001\001"
                + "\000\002\001\001\000\002\001\001\000\010\030\171\036"
                + "\063\044\057\001\001\000\002\001\001\000\002\001\001"
                + "\000\012\037\162\040\161\042\102\043\105\001\001\000"
                + "\002\001\001\000\002\001\001\000\004\045\132\001\001"
                + "\000\002\001\001\000\006\037\126\040\125\001\001\000"
                + "\002\001\001\000\006\036\060\044\057\001\001\000\006"
                + "\042\102\043\105\001\001\000\002\001\001\000\006\036"
                + "\063\044\057\001\001\000\006\042\102\043\105\001\001"
                + "\000\006\036\065\044\057\001\001\000\006\042\102\043"
                + "\105\001\001\000\002\001\001\000\006\036\070\044\057"
                + "\001\001\000\006\042\102\043\105\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\006\036\113\044\057"
                + "\001\001\000\002\001\001\000\002\001\001\000\006\036"
                + "\112\044\057\001\001\000\006\036\110\044\057\001\001"
                + "\000\002\001\001\000\006\042\102\043\105\001\001\000"
                + "\002\001\001\000\006\042\102\043\105\001\001\000\006"
                + "\042\102\043\105\001\001\000\002\001\001\000\006\036"
                + "\116\044\057\001\001\000\006\042\102\043\105\001\001"
                + "\000\002\001\001\000\002\001\001\000\006\036\131\044"
                + "\057\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\006\036\130\044\057\001\001\000\006\036"
                + "\127\044\057\001\001\000\006\042\102\043\105\001\001"
                + "\000\006\042\102\043\105\001\001\000\006\042\102\043"
                + "\105\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\006\026\136\045\140\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\004\045\143"
                + "\001\001\000\002\001\001\000\002\001\001\000\004\030"
                + "\145\001\001\000\004\041\147\001\001\000\002\001\001"
                + "\000\004\030\160\001\001\000\002\001\001\000\002\001"
                + "\001\000\004\030\155\001\001\000\002\001\001\000\002"
                + "\001\001\000\004\041\147\001\001\000\004\030\157\001"
                + "\001\000\004\041\147\001\001\000\004\041\147\001\001"
                + "\000\006\036\170\044\057\001\001\000\006\036\167\044"
                + "\057\001\001\000\006\036\166\044\057\001\001\000\006"
                + "\036\165\044\057\001\001\000\006\042\102\043\105\001"
                + "\001\000\006\042\102\043\105\001\001\000\006\042\102"
                + "\043\105\001\001\000\006\042\102\043\105\001\001\000"
                + "\004\041\147\001\001\000\020\031\042\032\037\033\055"
                + "\034\047\035\030\036\173\044\057\001\001\000\012\037"
                + "\162\040\161\042\102\043\105\001\001\000\002\001\001"
                + "\000\006\036\200\044\057\001\001\000\006\036\177\044"
                + "\057\001\001\000\006\042\102\043\105\001\001\000\006"
                + "\042\102\043\105\001\001\000\006\036\204\044\057\001"
                + "\001\000\006\036\203\044\057\001\001\000\006\042\102"
                + "\043\105\001\001\000\006\042\102\043\105\001\001\000"
                + "\010\030\206\036\116\044\057\001\001\000\004\041\147"
                + "\001\001\000\020\031\042\032\037\033\055\034\047\035"
                + "\030\036\173\044\057\001\001\000\002\001\001\000\004"
                + "\041\147\001\001\000\002\001\001\000\004\030\214\001"
                + "\001\000\004\041\147\001\001\000\006\036\216\044\057"
                + "\001\001\000\006\042\102\043\105\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\004\030\235"
                + "\001\001\000\004\030\232\001\001\000\002\001\001\000"
                + "\002\001\001\000\004\030\227\001\001\000\004\041\147"
                + "\001\001\000\002\001\001\000\002\001\001\000\004\041"
                + "\147\001\001\000\002\001\001\000\002\001\001\000\004"
                + "\041\147\001\001\000\002\001\001\000\002\001\001\000"
                + "\004\041\147\001\001\000\002\001\001\000\002\001\001"
                + "\000\004\041\147\001\001\000\002\001\001\000\002\001"
                + "\001\000\004\022\224\001\001\000\004\025\250\001\001"
                + "\000\004\022\251\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\006\015\264\020\266\001\001\000\004\030\261\001"
                + "\001\000\002\001\001\000\004\041\147\001\001\000\002"
                + "\001\001\000\002\001\001\000\006\016\274\027\273\001"
                + "\001\000\004\030\267\001\001\000\002\001\001\000\004"
                + "\041\147\001\001\000\002\001\001\000\002\001\001\000"
                + "\002\001\001\000\002\001\001\000\004\023\276\001\001"
                + "\000\004\026\305\001\001\000\002\001\001\000\004\026"
                + "\300\001\001\000\002\001\001\000\002\001\001\000\002"
                + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
                + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
                + "\006\011\316\014\315\001\001\000\006\012\320\021\317"
                + "\001\001\000\002\001\001\000\002\001\001\000\006\013"
                + "\325\017\260\001\001\000\004\030\322\001\001\000\004"
                + "\041\147\001\001\000\002\001\001\000\002\001\001\000"
                + "\004\020\266\001\001\000\002\001\001\000\002\001\001"
                + "\000\002\001\001\000\002\001\001"
          });

  /** Access to <code>reduce_goto</code> table. */
  @Override
  public short[][] reduce_table() {
    return _reduce_table;
  }

  /** Instance of action encapsulation class. */
  protected CUP$ACSLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions() {
    action_obj = new CUP$ACSLParser$actions(this);
  }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
      int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
      throws java.lang.Exception {
    /* call code in generated class */
    return action_obj.CUP$ACSLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {
    return 0;
  }
  /** Indicates start production. */
  @Override
  public int start_production() {
    return 1;
  }

  /** <code>EOF</code> Symbol index. */
  @Override
  public int EOF_sym() {
    return 0;
  }

  /** <code>error</code> Symbol index. */
  @Override
  public int error_sym() {
    return 1;
  }

  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan() throws java.lang.Exception {
    return scanner.getNext();
  }

  private ACSLScanner scanner;
  private IdentifierCheckingVisitor identifierCheckingVisitor;
  private final Set<Behavior> behaviors = new HashSet<>();
  private List<FileLocation> orderedLocs;
  private List<CFAEdge> orderedCFALocs;

  private ACSLParser(
      ACSLScanner pScanner,
      SymbolFactory sf,
      CFAWithACSLAnnotations pCfa,
      List<FileLocation> pOrderedLocs,
      List<CFAEdge> pOrderedCFALocs,
      LogManager pLogger) {
    super(pScanner, sf);
    scanner = pScanner;
    identifierCheckingVisitor = new IdentifierCheckingVisitor(pCfa, pLogger);
    orderedLocs = pOrderedLocs;
    orderedCFALocs = pOrderedCFALocs;
  }

  public static CFA parseACSLAnnotations(
      List<String> files,
      CFA pCfa,
      LogManager logger,
      List<FileLocation> commentPositions,
      SyntacticBlockStructure blockStructure)
      throws CParserException, IOException {
    ComplexSymbolFactory sf = new ComplexSymbolFactory();
    EdgeCollectingCFAVisitor edgeVisitor = new CFATraversal.EdgeCollectingCFAVisitor();
    CFATraversal.dfs().traverseOnce(pCfa.getMainFunction(), edgeVisitor);
    ImmutableList<CFAEdge> orderedCFALocs =
        ImmutableList.sortedCopyOf(
            Comparator.comparingInt(pEdge -> pEdge.getFileLocation().getNodeOffset()),
            edgeVisitor.getVisitedEdges());
    CFAWithACSLAnnotations newCFA = new CFAWithACSLAnnotations(pCfa);

    for (String filename : files) {
      ACSLScanner scanner =
          new ACSLScanner(new FileReader(filename, StandardCharsets.UTF_8), logger);
      ImmutableList<FileLocation> orderedLocs =
          ImmutableList.sortedCopyOf(
              Comparator.comparingInt(FileLocation::getNodeOffset),
              FluentIterable.from(commentPositions)
                  .filter(x -> x.getFileName().toString().equals(filename)));
      ACSLParser parser = new ACSLParser(scanner, sf, newCFA, orderedLocs, orderedCFALocs, logger);
      List<ACSLAnnotation> annotations = parser.parseACSLAnnotations();
      int skipped = 0;
      Map<ACSLAnnotation, CFAEdge> initialEdges = new HashMap<>();
      Map<ACSLAnnotation, FileLocation> annotationLocations = new HashMap<>();
      for (int i = 0; i < orderedLocs.size(); i++) {
        ACSLAnnotation currentAnnotation = annotations.get(i);
        if (currentAnnotation instanceof InvalidAnnotation) {
          skipped++;
          continue;
        }
        if (currentAnnotation.getCompletenessPredicate().equals(ACSLPredicate.getFalse())) {
          logger.log(Level.INFO, "Encountered annotation with unsatisfied completeness predicate");
        }
        FileLocation currentAnnotationLocation = orderedLocs.get(i);
        annotationLocations.put(currentAnnotation, currentAnnotationLocation);
        if (parser.shouldSkip(currentAnnotation, currentAnnotationLocation)) {
          skipped++;
          continue;
        } else if (currentAnnotation instanceof ACSLAssertion) {
          handleAssertion(
              newCFA, currentAnnotationLocation, (ACSLAssertion) currentAnnotation, blockStructure);
        } else {
          for (CFAEdge edge : orderedCFALocs) {
            if (edge.getFileLocation().getNodeOffset()
                > currentAnnotationLocation.getNodeOffset()) {
              initialEdges.put(currentAnnotation, edge);
              break;
            }
          }
        }
      }
      logger.logf(Level.INFO, "Skipped %d of %d annotations", skipped, annotations.size());
      adjustAnnotationLocations(
          initialEdges, newCFA, filename, blockStructure, annotationLocations);
      checkBehaviors(newCFA, blockStructure);
    }

    return newCFA;
  }

  /**
   * Add ACSL annotations to CFAEdges based on the initial mapping.
   *
   * @param initialEdges The initial assignment of ACSL annotations to CFA edges.
   * @param cfaWithLocs A CFA holding the location information about the annotations.
   * @param currentFile Name of the file the annotations of which should be handled.
   * @param blockStructure The {@link SyntacticBlockStructure} of the current file.
   */
  private static void adjustAnnotationLocations(
      Map<ACSLAnnotation, CFAEdge> initialEdges,
      CFAWithACSLAnnotations cfaWithLocs,
      String currentFile,
      SyntacticBlockStructure blockStructure,
      Map<ACSLAnnotation, FileLocation> annotationLocations) {
    for (Entry<ACSLAnnotation, CFAEdge> entry : initialEdges.entrySet()) {
      ACSLAnnotation annotation = entry.getKey();
      CFAEdge edge = entry.getValue();
      if (edge.getFileLocation().getFileName().toString().equals(currentFile)) {
        if (annotation instanceof FunctionContract) {
          FileLocation annotationLocation = annotationLocations.get(annotation);
          if (blockStructure.getInnermostBlockOf(annotationLocation) == null) {
            handleFunctionContract(
                cfaWithLocs, (CDeclarationEdge) edge, (FunctionContract) annotation);
          } else {
            handleStatementContract(
                cfaWithLocs,
                edge,
                StatementContract.fromFunctionContract(
                    ImmutableList.of(), (FunctionContract) annotation),
                blockStructure,
                annotationLocation);
          }
        } else if (annotation instanceof StatementContract) {
          handleStatementContract(
              cfaWithLocs,
              edge,
              (StatementContract) annotation,
              blockStructure,
              annotationLocations.get(annotation));
        } else if (annotation instanceof ACSLLoopAnnotation) {
          handleLoopAnnotation(cfaWithLocs, edge, (ACSLLoopAnnotation) annotation);
        } else if (annotation instanceof ACSLAssertion) {
          // already handled
        } else {
          throw new AssertionError("Unknown annotation type for annotation\n" + annotation);
        }
      }
    }
  }

  private static void handleFunctionContract(
      CFAWithACSLAnnotations cfaWithLocs, CDeclarationEdge edge, FunctionContract annotation) {
    // Annotation is currently placed on declaration edge for the function
    // -> move it to the function entry
    String functionName = edge.getDeclaration().getName();
    FunctionEntryNode entry = cfaWithLocs.getAllFunctions().get(functionName);
    assert entry.getNumLeavingEdges() == 1;
    cfaWithLocs
        .getEdgesToAnnotations()
        .put(entry.getLeavingEdge(0), annotation.getCopyForPreState());
    // Add function contracts to function exits as well because some clauses have to be
    // evaluated in the post-state
    FunctionExitNode exit = entry.getExitNode();
    for (int i = 0; i < exit.getNumEnteringEdges(); i++) {
      CFAEdge currentEdge = exit.getEnteringEdge(i);
      cfaWithLocs.getEdgesToAnnotations().put(currentEdge, annotation.getCopyForPostState());
    }
  }

  private static void handleStatementContract(
      CFAWithACSLAnnotations cfaWithLocs,
      CFAEdge edge,
      StatementContract annotation,
      SyntacticBlockStructure blockStructure,
      FileLocation annotationLocation) {
    SyntacticBlock innermostBlock = blockStructure.getInnermostBlockOf(edge.getFileLocation());
    assert innermostBlock != null : "Not inside a block";
    if (annotationLocation.getNodeOffset() < innermostBlock.getStartOffset()) {
      // this is a statement contract for a block statement, e.g. a while-loop
      for (CFAEdge enteringEdge : innermostBlock.getEnteringEdges()) {
        cfaWithLocs.getEdgesToAnnotations().put(enteringEdge, annotation.getCopyForPreState());
      }
      for (CFAEdge leavingEdge : innermostBlock.getLeavingEdges()) {
        cfaWithLocs.getEdgesToAnnotations().put(leavingEdge, annotation.getCopyForPostState());
      }
    } else {
      // this is a statement contract for a simple statement, e.g. x = 10;
      for (int i = 0; i < edge.getPredecessor().getNumEnteringEdges(); i++) {
        cfaWithLocs
            .getEdgesToAnnotations()
            .put(edge.getPredecessor().getEnteringEdge(i), annotation.getCopyForPreState());
      }
      cfaWithLocs.getEdgesToAnnotations().put(edge, annotation.getCopyForPostState());
    }
  }

  /**
   * Adds the given loop annotation to the correct edges in the CFA.
   *
   * @param cfaWithLocs A CFA holding location information about the annotation.
   * @param edge The edge on which the annotation was originally placed.
   * @param annotation The loop annotation to be handled.
   */
  private static void handleLoopAnnotation(
      CFAWithACSLAnnotations cfaWithLocs, CFAEdge edge, ACSLLoopAnnotation annotation) {
    CFANode successor = edge.getSuccessor();
    if (edge.getDescription().equals("for")) {
      CFANode node = successor;
      if (successor.getNumLeavingEdges() == 1) {
        node = successor.getLeavingEdge(0).getSuccessor();
      }
      for (int i = 0; i < node.getNumEnteringEdges(); i++) {
        cfaWithLocs.getEdgesToAnnotations().put(node.getEnteringEdge(i), annotation);
      }
    } else {
      assert edge.getDescription().equals("while") || edge.getDescription().equals("do");
      for (int i = 0; i < successor.getNumEnteringEdges(); i++) {
        CFAEdge currentEdge = successor.getEnteringEdge(i);
        cfaWithLocs.getEdgesToAnnotations().put(currentEdge, annotation);
      }
    }
  }

  /**
   * Adds the given assertion to the correct edges in the CFA.
   *
   * @param cfaWithLocs A CFA holding location information about the annotation.
   * @param loc The location at which the annotation was originally placed.
   * @param annotation The annotation to be handled.
   * @param blockStructure The {@link SyntacticBlockStructure} of the program.
   */
  private static void handleAssertion(
      CFAWithACSLAnnotations cfaWithLocs,
      FileLocation loc,
      ACSLAssertion annotation,
      SyntacticBlockStructure blockStructure) {
    SyntacticBlock block = blockStructure.getInnermostBlockOf(loc);
    CFAEdge next = blockStructure.getNextEdge(block, loc);
    if (next == null) {
      // assertion is at very end of block (after every leaving edge)
      Set<CFAEdge> edges = blockStructure.getPrevEdges(block, loc);
      if (edges.isEmpty()) {
        // assertion is at beginning of block -> block is empty apart from annotation
        edges = block.getEnteringEdges();
      }
      for (CFAEdge edge : edges) {
        cfaWithLocs.getEdgesToAnnotations().put(edge, annotation);
      }
    } else {
      CFANode node = next.getPredecessor();
      for (int i = 0; i < node.getNumEnteringEdges(); i++) {
        CFAEdge currentEdge = node.getEnteringEdge(i);
        cfaWithLocs.getEdgesToAnnotations().put(currentEdge, annotation);
      }
    }
  }

  /** Make sure that all behaviors are actually in scope when they are referenced. */
  private static void checkBehaviors(
      CFAWithACSLAnnotations cfa, SyntacticBlockStructure blockStructure) {
    Multimap<CFAEdge, ACSLAnnotation> edgesToAnnotations = cfa.getEdgesToAnnotations();
    Map<String, CFAEdge> behaviorDeclarations = new HashMap<>();
    // First, collect all behaviors where they are introduced
    for (Entry<CFAEdge, ACSLAnnotation> entry : edgesToAnnotations.entries()) {
      ACSLAnnotation annotation = entry.getValue();
      if (annotation instanceof FunctionContract) {
        FunctionContract fcontract = (FunctionContract) annotation;
        if (!fcontract.isPreStateRepresentation()) {
          // Behaviors are stored in post-state representation as well, but no need to add twice
          continue;
        }
        for (Behavior behavior : fcontract.getDeclaredBehaviors()) {
          behaviorDeclarations.put(
              behavior.getName(),
              cfa.getFunctionHead(entry.getKey().getPredecessor().getFunctionName())
                  .getLeavingEdge(0));
        }
      } else if (annotation instanceof StatementContract) {
        StatementContract scontract = (StatementContract) annotation;
        if (!scontract.isPreStateRepresentation()) {
          // Behaviors are stored in post-state representation as well, but are declared
          // where pre-state representation is placed
          continue;
        }
        for (Behavior behavior : scontract.getDeclaredBehaviors()) {
          behaviorDeclarations.put(behavior.getName(), entry.getKey());
        }
      }
    }
    // Now check whether all referenced behaviors are still in scope
    for (Entry<CFAEdge, ACSLAnnotation> entry : edgesToAnnotations.entries()) {
      CFAEdge edge = entry.getKey();
      ACSLAnnotation annotation = entry.getValue();
      for (Behavior behavior : annotation.getReferencedBehaviors()) {
        if (!behaviorDeclarations.containsKey(behavior.getName())
            || !inSameScope(behaviorDeclarations.get(behavior.getName()), edge, blockStructure)) {
          edgesToAnnotations.remove(edge, annotation);
        }
      }
    }
  }

  private List<ACSLAnnotation> parseACSLAnnotations() throws CParserException {
    try {
      Symbol symbol = this.parse();
      if (symbol != null) {
        return (List<ACSLAnnotation>) symbol.value;
      } else {
        return ImmutableList.of();
      }
    } catch (Exception e) {
      throw new CParserException(e);
    }
  }

  private String getCurrentFunctionName() {
    int currentOffset = orderedLocs.get(scanner.getCurrentAnnotation()).getNodeOffset();
    for (CFAEdge edge : orderedCFALocs) {
      if (edge.getFileLocation().getNodeOffset() > currentOffset) {
        return edge.getSuccessor().getFunctionName();
      }
    }
    return orderedCFALocs.get(orderedCFALocs.size() - 1).getSuccessor().getFunctionName();
  }

  private void putBehavior(Behavior behavior) {
    behaviors.add(behavior);
  }

  private Behavior getBehavior(String behaviorName) {
    for (Behavior behavior : behaviors) {
      if (behavior.getName().equals(behaviorName)) {
        return behavior;
      }
    }
    return new Behavior(behaviorName);
  }

  private static boolean inSameScope(
      CFAEdge declarationEdge, CFAEdge referenceEdge, SyntacticBlockStructure blockStructure) {
    return blockStructure
        .getInnermostBlockOf(declarationEdge.getFileLocation())
        .contains(blockStructure.getInnermostBlockOf(referenceEdge.getFileLocation()));
  }

  @Override
  public ACSLScanner getScanner() {
    return scanner;
  }

  private boolean shouldSkip(ACSLAnnotation annotation, FileLocation annotationLocation) {
    boolean allIdentifiersInScope =
        annotation.getPredicateRepresentation().accept(identifierCheckingVisitor);
    if (allIdentifiersInScope) {
      if (!(annotation instanceof ACSLAssertion)) {
        // Only assertions may be placed at the end of a file,
        // so there should be another edge after the annotation for it to be valid
        CFAEdge lastEdge = orderedCFALocs.get(orderedCFALocs.size() - 1);
        return lastEdge.getFileLocation().getNodeOffset() < annotationLocation.getNodeOffset();
      }
      return false;
    }
    return true;
  }

  /** Cup generated class to encapsulate user supplied action code. */
  @SuppressWarnings({"rawtypes", "unchecked", "unused"})
  class CUP$ACSLParser$actions {
    private final ACSLParser parser;

    /** Constructor */
    CUP$ACSLParser$actions(ACSLParser parser) {
      this.parser = parser;
    }

    /** Method 0 with the actual generated action code for actions 0 to 300. */
    public final java_cup.runtime.Symbol CUP$ACSLParser$do_action_part00000000(
        int CUP$ACSLParser$act_num,
        java_cup.runtime.lr_parser CUP$ACSLParser$parser,
        java.util.Stack CUP$ACSLParser$stack,
        int CUP$ACSLParser$top)
        throws java.lang.Exception {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ACSLParser$result;

      /* select the action based on the action number */
      switch (CUP$ACSLParser$act_num) {
          /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // annotations ::= annotations annotation
          {
            List<ACSLAnnotation> RESULT = null;
            List<ACSLAnnotation> as =
                (List<ACSLAnnotation>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLAnnotation a =
                (ACSLAnnotation) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            as.add(a);
            RESULT = as;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("annotations", 0, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // $START ::= annotations EOF
          {
            Object RESULT = null;
            List<ACSLAnnotation> start_val =
                (List<ACSLAnnotation>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RESULT = start_val;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("$START", 0, RESULT);
          }
          /* ACCEPT */
          CUP$ACSLParser$parser.done_parsing();
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // annotations ::=
          {
            List<ACSLAnnotation> RESULT = null;
            RESULT = new ArrayList<>();
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("annotations", 0, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // annotation ::= fcontract ANNOTATION_END
          {
            ACSLAnnotation RESULT = null;
            FunctionContract f =
                (FunctionContract)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RESULT = f;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("annotation", 1, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // annotation ::= scontract ANNOTATION_END
          {
            ACSLAnnotation RESULT = null;
            StatementContract s =
                (StatementContract)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RESULT = s;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("annotation", 1, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // annotation ::= loopannotation ANNOTATION_END
          {
            ACSLAnnotation RESULT = null;
            ACSLLoopAnnotation l =
                (ACSLLoopAnnotation)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RESULT = l;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("annotation", 1, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // annotation ::= assertion ANNOTATION_END
          {
            ACSLAnnotation RESULT = null;
            ACSLAssertion a =
                (ACSLAssertion)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RESULT = a;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("annotation", 1, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // annotation ::= SYNTAXERROR
          {
            ACSLAnnotation RESULT = null;
            RESULT = new InvalidAnnotation();
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("annotation", 1, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // assertion ::= NEXTCONTRACT ASSERT predicate SEMI PRED_START
          {
            ACSLAssertion RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            RESULT = new ACSLAssertion(ACSLAssertion.AssertionKind.ASSERT, p);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("assertion", 5, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // assertion ::= NEXTCONTRACT behavior_identifiers ASSERT predicate SEMI PRED_START
          {
            ACSLAssertion RESULT = null;
            List<String> i =
                (List<String>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 4))
                        .value;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            List<Behavior> enclosingBehaviors = new ArrayList<>();
            for (String id : i) {
              enclosingBehaviors.add(parser.getBehavior(id));
            }
            RESULT = new ACSLAssertion(ACSLAssertion.AssertionKind.ASSERT, enclosingBehaviors, p);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("assertion", 5, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // assertion ::= NEXTCONTRACT CHECK predicate SEMI PRED_START
          {
            ACSLAssertion RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            RESULT = new ACSLAssertion(ACSLAssertion.AssertionKind.CHECK, p);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("assertion", 5, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // assertion ::= NEXTCONTRACT behavior_identifiers CHECK predicate SEMI PRED_START
          {
            ACSLAssertion RESULT = null;
            List<String> i =
                (List<String>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 4))
                        .value;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            List<Behavior> enclosingBehaviors = new ArrayList<>();
            for (String id : i) {
              enclosingBehaviors.add(parser.getBehavior(id));
            }
            RESULT = new ACSLAssertion(ACSLAssertion.AssertionKind.CHECK, enclosingBehaviors, p);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("assertion", 5, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // loopannotation ::= NEXTCONTRACT loop_clauses loop_behaviors
          {
            ACSLLoopAnnotation RESULT = null;
            ACSLLoopInvariant c =
                (ACSLLoopInvariant)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            Map<List<Behavior>, ACSLLoopInvariant> b =
                (Map<List<Behavior>, ACSLLoopInvariant>)
                    ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLLoopAnnotation(c, b);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("loopannotation", 4, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // loopannotation ::= NEXTCONTRACT loop_behaviors
          {
            ACSLLoopAnnotation RESULT = null;
            Map<List<Behavior>, ACSLLoopInvariant> b =
                (Map<List<Behavior>, ACSLLoopInvariant>)
                    ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLLoopAnnotation(b);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("loopannotation", 4, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // loopannotation ::= NEXTCONTRACT loop_clauses
          {
            ACSLLoopAnnotation RESULT = null;
            ACSLLoopInvariant c =
                (ACSLLoopInvariant) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLLoopAnnotation(c);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("loopannotation", 4, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // fcontract ::= NEXTCONTRACT clauses
          {
            FunctionContract RESULT = null;
            ContractBuilder c =
                (ContractBuilder) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = c.build();
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("fcontract", 2, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // scontract ::= NEXTCONTRACT behavior_identifiers clauses
          {
            StatementContract RESULT = null;
            List<String> i =
                (List<String>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ContractBuilder c =
                (ContractBuilder) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            List<Behavior> enclosingBehaviors = new ArrayList<>();
            for (String id : i) {
              enclosingBehaviors.add(parser.getBehavior(id));
            }
            RESULT = StatementContract.fromFunctionContract(enclosingBehaviors, c.build());
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("scontract", 3, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // behavior_identifiers ::= FOR identifiers COLON PRED_START
          {
            List<String> RESULT = null;
            List<String> i =
                (List<String>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            RESULT = i;
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("behavior_identifiers", 19, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // identifiers ::= identifiers COMMA IDENTIFIER
          {
            List<String> RESULT = null;
            List<String> is =
                (List<String>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            String i = (String) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            is.add(i);
            RESULT = is;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("identifiers", 20, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // identifiers ::= IDENTIFIER
          {
            List<String> RESULT = null;
            String i = (String) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            List<String> identifiers = new ArrayList<>();
            identifiers.add(i);
            RESULT = identifiers;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("identifiers", 20, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // loop_behaviors ::= loop_behaviors behavior_identifiers loop_clauses
          {
            Map<List<Behavior>, ACSLLoopInvariant> RESULT = null;
            Map<List<Behavior>, ACSLLoopInvariant> b =
                (Map<List<Behavior>, ACSLLoopInvariant>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            List<String> i =
                (List<String>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLLoopInvariant c =
                (ACSLLoopInvariant) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            List<Behavior> holdsFor = new ArrayList<>(i.size());
            for (String id : i) {
              holdsFor.add(parser.getBehavior(id));
            }
            b.put(holdsFor, c);
            RESULT = b;
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("loop_behaviors", 18, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // loop_behaviors ::= behavior_identifiers loop_clauses
          {
            Map<List<Behavior>, ACSLLoopInvariant> RESULT = null;
            List<String> i =
                (List<String>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLLoopInvariant c =
                (ACSLLoopInvariant) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            Map<List<Behavior>, ACSLLoopInvariant> loopBehaviors = new HashMap<>();
            List<Behavior> holdsFor = new ArrayList<>(i.size());
            for (String id : i) {
              holdsFor.add(parser.getBehavior(id));
            }
            loopBehaviors.put(holdsFor, c);
            RESULT = loopBehaviors;
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("loop_behaviors", 18, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // loop_clauses ::= loop_clauses LINVARIANT predicate SEMI PRED_START
          {
            ACSLLoopInvariant RESULT = null;
            ACSLLoopInvariant c =
                (ACSLLoopInvariant)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 4))
                        .value;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            RESULT = c.and(p);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("loop_clauses", 16, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // loop_clauses ::= LINVARIANT predicate SEMI PRED_START
          {
            ACSLLoopInvariant RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            assert p.isAllowedIn(ACSLLoopInvariant.class);
            RESULT = new ACSLLoopInvariant(p);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("loop_clauses", 16, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // clauses ::= req_clauses ens_clauses behaviors completeness_clauses
          {
            ContractBuilder RESULT = null;
            Collection<RequiresClause> r =
                (Collection<RequiresClause>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 3))
                        .value;
            Collection<EnsuresClause> e =
                (Collection<EnsuresClause>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            Collection<Behavior> b =
                (Collection<Behavior>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            Collection<CompletenessClause> c =
                (Collection<CompletenessClause>)
                    ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ContractBuilder().addAll(r).addAll(e).addAll(b).addAll(c);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("clauses", 6, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // req_clauses ::= req_clauses req_clause
          {
            Collection<RequiresClause> RESULT = null;
            Collection<RequiresClause> c =
                (Collection<RequiresClause>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RequiresClause r =
                (RequiresClause) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            c.add(r);
            RESULT = c;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("req_clauses", 8, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // req_clauses ::=
          {
            Collection<RequiresClause> RESULT = null;
            RESULT = new HashSet<>();
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("req_clauses", 8, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // ens_clauses ::= ens_clauses ens_clause
          {
            Collection<EnsuresClause> RESULT = null;
            Collection<EnsuresClause> c =
                (Collection<EnsuresClause>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            EnsuresClause e =
                (EnsuresClause) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            c.add(e);
            RESULT = c;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("ens_clauses", 9, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // ens_clauses ::=
          {
            Collection<EnsuresClause> RESULT = null;
            RESULT = new HashSet<>();
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("ens_clauses", 9, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // behaviors ::= behaviors behavior
          {
            Collection<Behavior> RESULT = null;
            Collection<Behavior> c =
                (Collection<Behavior>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            Behavior b = (Behavior) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            c.add(b);
            RESULT = c;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("behaviors", 11, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // behaviors ::=
          {
            Collection<Behavior> RESULT = null;
            RESULT = new HashSet<>();
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("behaviors", 11, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // behavior ::= BEHAVIOR IDENTIFIER COLON PRED_START behavior_body
          {
            Behavior RESULT = null;
            String i =
                (String)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 3))
                        .value;
            BehaviorBuilder bb =
                (BehaviorBuilder) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            bb.setBehaviorName(i);
            Behavior b = bb.build();
            parser.putBehavior(b);
            RESULT = b;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("behavior", 21, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // completeness_clauses ::= completeness_clauses completeness_clause
          {
            Collection<CompletenessClause> RESULT = null;
            Collection<CompletenessClause> cs =
                (Collection<CompletenessClause>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            CompletenessClause c =
                (CompletenessClause) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            cs.add(c);
            RESULT = cs;
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("completeness_clauses", 12, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // completeness_clauses ::=
          {
            Collection<CompletenessClause> RESULT = null;
            RESULT = new HashSet<>();
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("completeness_clauses", 12, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // completeness_clause ::= COMPLETE_BEHAVIORS identifiers SEMI PRED_START
          {
            CompletenessClause RESULT = null;
            List<String> i =
                (List<String>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            List<Behavior> behaviors = new ArrayList<>(i.size());
            for (String id : i) {
              behaviors.add(parser.getBehavior(id));
            }
            RESULT = new CompletenessClause(behaviors, CompletenessClause.RelationKind.COMPLETE);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("completeness_clause", 17, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // completeness_clause ::= COMPLETE_BEHAVIORS SEMI PRED_START
          {
            CompletenessClause RESULT = null;
            RESULT =
                new CompletenessClause(
                    ImmutableList.of(), CompletenessClause.RelationKind.COMPLETE);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("completeness_clause", 17, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // completeness_clause ::= DISJOINT_BEHAVIORS identifiers SEMI PRED_START
          {
            CompletenessClause RESULT = null;
            List<String> i =
                (List<String>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            List<Behavior> behaviors = new ArrayList<>(i.size());
            for (String id : i) {
              behaviors.add(parser.getBehavior(id));
            }
            RESULT = new CompletenessClause(behaviors, CompletenessClause.RelationKind.DISJOINT);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("completeness_clause", 17, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // completeness_clause ::= DISJOINT_BEHAVIORS SEMI PRED_START
          {
            CompletenessClause RESULT = null;
            RESULT =
                new CompletenessClause(
                    ImmutableList.of(), CompletenessClause.RelationKind.DISJOINT);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("completeness_clause", 17, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // behavior_body ::= ass_clauses req_clauses ens_clauses
          {
            BehaviorBuilder RESULT = null;
            Collection<AssumesClause> a =
                (Collection<AssumesClause>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            Collection<RequiresClause> r =
                (Collection<RequiresClause>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            Collection<EnsuresClause> e =
                (Collection<EnsuresClause>)
                    ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new BehaviorBuilder().addAll(a).addAll(r).addAll(e);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("behavior_body", 7, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // ass_clauses ::= ass_clauses ass_clause
          {
            Collection<AssumesClause> RESULT = null;
            Collection<AssumesClause> c =
                (Collection<AssumesClause>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            AssumesClause a =
                (AssumesClause) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            c.add(a);
            RESULT = c;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("ass_clauses", 10, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // ass_clauses ::=
          {
            Collection<AssumesClause> RESULT = null;
            RESULT = new HashSet<>();
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("ass_clauses", 10, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // req_clause ::= REQ predicate SEMI PRED_START
          {
            RequiresClause RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            assert p.isAllowedIn(RequiresClause.class);
            RESULT = new RequiresClause(p);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("req_clause", 13, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // ens_clause ::= ENS predicate SEMI PRED_START
          {
            EnsuresClause RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            assert p.isAllowedIn(EnsuresClause.class);
            RESULT = new EnsuresClause(p);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("ens_clause", 14, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // ass_clause ::= ASS predicate SEMI PRED_START
          {
            AssumesClause RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            assert p.isAllowedIn(AssumesClause.class);
            RESULT = new AssumesClause(p);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("ass_clause", 15, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // predicate ::= PRED_START TRUE
          {
            ACSLPredicate RESULT = null;
            RESULT = ACSLPredicate.getTrue();
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // predicate ::= PRED_START FALSE
          {
            ACSLPredicate RESULT = null;
            RESULT = ACSLPredicate.getFalse();
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // predicate ::= predicate log_op predicate
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate p1 =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLBinaryOperator op =
                (ACSLBinaryOperator)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLPredicate p2 =
                (ACSLPredicate) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLLogicalPredicate(p1, p2, op);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // predicate ::= PRED_START term NEQ term
          {
            ACSLPredicate RESULT = null;
            ACSLTerm t1 =
                (ACSLTerm)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLTerm t2 = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLSimplePredicate(new ACSLBinaryTerm(t1, t2, ACSLBinaryOperator.NEQ));
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // predicate ::= PRED_START eq_chain
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate ec =
                (ACSLPredicate) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = ec;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // predicate ::= PRED_START asc_comp_predicate
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = p;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // predicate ::= PRED_START desc_comp_predicate
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = p;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // predicate ::= PRED_START NEG predicate
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = p.negate();
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // predicate ::= PRED_START LPAREN predicate RPAREN
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RESULT = p;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // predicate ::= predicate QUESTION predicate COLON predicate
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate p1 =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 4))
                        .value;
            ACSLPredicate p2 =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLPredicate p3 =
                (ACSLPredicate) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLTernaryCondition(p1, p2, p3);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // predicate ::= PRED_START FORALL binders SEMI predicate
          {
            ACSLPredicate RESULT = null;
            Set<Binder> b =
                (Set<Binder>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLPredicate p =
                (ACSLPredicate) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            BinderApplicationVisitor visitor =
                new BinderApplicationVisitor(b, Binder.Quantifier.FORALL);
            RESULT = p.accept(visitor);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // predicate ::= PRED_START EXISTS binders SEMI predicate
          {
            ACSLPredicate RESULT = null;
            Set<Binder> b =
                (Set<Binder>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLPredicate p =
                (ACSLPredicate) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            BinderApplicationVisitor visitor =
                new BinderApplicationVisitor(b, Binder.Quantifier.EXISTS);
            RESULT = p.accept(visitor);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // predicate ::= PRED_START OLD LPAREN predicate RPAREN
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RESULT = new PredicateAt(p, ACSLDefaultLabel.OLD);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("predicate", 22, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // asc_comp_predicate ::= asc_comp_predicate asc_rel_op term
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLBinaryOperator op =
                (ACSLBinaryOperator)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLTerm t = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            ACSLTerm innerLeft;
            if (p instanceof ACSLSimplePredicate) {
              innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) p).getTerm()).getRight();
            } else {
              innerLeft =
                  ((ACSLBinaryTerm)
                          ((ACSLSimplePredicate) ((ACSLLogicalPredicate) p).getRight()).getTerm())
                      .getRight();
            }
            ACSLPredicate right = new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, op));
            RESULT = new ACSLLogicalPredicate(p, right, ACSLBinaryOperator.AND);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("asc_comp_predicate", 23, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // asc_comp_predicate ::= asc_comp_predicate EQ term
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLTerm t = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            ACSLTerm innerLeft;
            if (p instanceof ACSLSimplePredicate) {
              innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) p).getTerm()).getRight();
            } else {
              innerLeft =
                  ((ACSLBinaryTerm)
                          ((ACSLSimplePredicate) ((ACSLLogicalPredicate) p).getRight()).getTerm())
                      .getRight();
            }
            ACSLPredicate right =
                new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, ACSLBinaryOperator.EQ));
            RESULT = new ACSLLogicalPredicate(p, right, ACSLBinaryOperator.AND);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("asc_comp_predicate", 23, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // asc_comp_predicate ::= asc_base
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate ab =
                (ACSLPredicate) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = ab;
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("asc_comp_predicate", 23, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // asc_comp_predicate ::= eq_chain asc_rel_op term
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate ec =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLBinaryOperator op =
                (ACSLBinaryOperator)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLTerm t = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            ACSLTerm innerLeft;
            if (ec instanceof ACSLSimplePredicate) {
              innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ec).getTerm()).getRight();
            } else {
              innerLeft =
                  ((ACSLBinaryTerm)
                          ((ACSLSimplePredicate) ((ACSLLogicalPredicate) ec).getRight()).getTerm())
                      .getRight();
            }
            ACSLPredicate right = new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, op));
            RESULT = new ACSLLogicalPredicate(ec, right, ACSLBinaryOperator.AND);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("asc_comp_predicate", 23, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // desc_comp_predicate ::= desc_comp_predicate desc_rel_op term
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLBinaryOperator op =
                (ACSLBinaryOperator)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLTerm t = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            ACSLTerm innerLeft;
            if (p instanceof ACSLSimplePredicate) {
              innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) p).getTerm()).getRight();
            } else {
              innerLeft =
                  ((ACSLBinaryTerm)
                          ((ACSLSimplePredicate) ((ACSLLogicalPredicate) p).getRight()).getTerm())
                      .getRight();
            }
            ACSLPredicate right = new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, op));
            RESULT = new ACSLLogicalPredicate(p, right, ACSLBinaryOperator.AND);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("desc_comp_predicate", 24, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // desc_comp_predicate ::= desc_comp_predicate EQ term
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate p =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLTerm t = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            ACSLTerm innerLeft;
            if (p instanceof ACSLSimplePredicate) {
              innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) p).getTerm()).getRight();
            } else {
              innerLeft =
                  ((ACSLBinaryTerm)
                          ((ACSLSimplePredicate) ((ACSLLogicalPredicate) p).getRight()).getTerm())
                      .getRight();
            }
            ACSLPredicate right =
                new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, ACSLBinaryOperator.EQ));
            RESULT = new ACSLLogicalPredicate(p, right, ACSLBinaryOperator.AND);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("desc_comp_predicate", 24, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // desc_comp_predicate ::= desc_base
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate db =
                (ACSLPredicate) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = db;
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("desc_comp_predicate", 24, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // desc_comp_predicate ::= eq_chain desc_rel_op term
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate ec =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLBinaryOperator op =
                (ACSLBinaryOperator)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLTerm t = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            ACSLTerm innerLeft;
            if (ec instanceof ACSLSimplePredicate) {
              innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ec).getTerm()).getRight();
            } else {
              innerLeft =
                  ((ACSLBinaryTerm)
                          ((ACSLSimplePredicate) ((ACSLLogicalPredicate) ec).getRight()).getTerm())
                      .getRight();
            }
            ACSLPredicate right = new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, op));
            RESULT = new ACSLLogicalPredicate(ec, right, ACSLBinaryOperator.AND);
            CUP$ACSLParser$result =
                parser.getSymbolFactory().newSymbol("desc_comp_predicate", 24, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // eq_chain ::= eq_chain EQ term
          {
            ACSLPredicate RESULT = null;
            ACSLPredicate ec =
                (ACSLPredicate)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLTerm t = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            ACSLTerm innerLeft;
            if (ec instanceof ACSLSimplePredicate) {
              innerLeft = ((ACSLBinaryTerm) ((ACSLSimplePredicate) ec).getTerm()).getRight();
            } else {
              innerLeft =
                  ((ACSLBinaryTerm)
                          ((ACSLSimplePredicate) ((ACSLLogicalPredicate) ec).getRight()).getTerm())
                      .getRight();
            }
            ACSLPredicate right =
                new ACSLSimplePredicate(new ACSLBinaryTerm(innerLeft, t, ACSLBinaryOperator.EQ));
            RESULT = new ACSLLogicalPredicate(ec, right, ACSLBinaryOperator.AND);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("eq_chain", 25, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // eq_chain ::= term EQ term
          {
            ACSLPredicate RESULT = null;
            ACSLTerm t1 =
                (ACSLTerm)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLTerm t2 = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLSimplePredicate(new ACSLBinaryTerm(t1, t2, ACSLBinaryOperator.EQ));
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("eq_chain", 25, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // asc_base ::= term asc_rel_op term
          {
            ACSLPredicate RESULT = null;
            ACSLTerm t1 =
                (ACSLTerm)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLBinaryOperator op =
                (ACSLBinaryOperator)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLTerm t2 = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLSimplePredicate(new ACSLBinaryTerm(t1, t2, op));
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("asc_base", 26, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // desc_base ::= term desc_rel_op term
          {
            ACSLPredicate RESULT = null;
            ACSLTerm t1 =
                (ACSLTerm)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLBinaryOperator op =
                (ACSLBinaryOperator)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLTerm t2 = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLSimplePredicate(new ACSLBinaryTerm(t1, t2, op));
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("desc_base", 27, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // binders ::= TYPE IDENTIFIER COMMA identifiers COMMA binders
          {
            Set<Binder> RESULT = null;
            ACSLType t =
                (ACSLType)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 5))
                        .value;
            String i =
                (String)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 4))
                        .value;
            List<String> is =
                (List<String>)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            Set<Binder> b =
                (Set<Binder>) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            Set<String> variables = new HashSet();
            variables.add(i);
            variables.addAll(is);
            Binder binder = new Binder(t, variables);
            b.add(binder);
            RESULT = b;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("binders", 35, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // binders ::= TYPE IDENTIFIER COMMA binders
          {
            Set<Binder> RESULT = null;
            ACSLType t =
                (ACSLType)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 3))
                        .value;
            String i =
                (String)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            Set<Binder> b =
                (Set<Binder>) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            Set<String> variables = new HashSet();
            variables.add(i);
            Binder binder = new Binder(t, variables);
            b.add(binder);
            RESULT = b;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("binders", 35, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // binders ::= TYPE IDENTIFIER COMMA identifiers
          {
            Set<Binder> RESULT = null;
            ACSLType t =
                (ACSLType)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 3))
                        .value;
            String i =
                (String)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            List<String> is =
                (List<String>) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            Set<Binder> binders = new HashSet();
            Set<String> variables = new HashSet();
            variables.add(i);
            variables.addAll(is);
            Binder binder = new Binder(t, variables);
            binders.add(binder);
            RESULT = binders;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("binders", 35, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // binders ::= TYPE IDENTIFIER
          {
            Set<Binder> RESULT = null;
            ACSLType t =
                (ACSLType)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            String i = (String) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            Set<Binder> binders = new HashSet();
            Set<String> variables = new HashSet();
            variables.add(i);
            Binder binder = new Binder(t, variables);
            binders.add(binder);
            RESULT = binders;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("binders", 35, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // term ::= PRED_START term
          {
            ACSLTerm RESULT = null;
            ACSLTerm t = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = t;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // term ::= LITERAL
          {
            ACSLTerm RESULT = null;
            BigInteger l =
                (BigInteger) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLIntegerLiteral(l);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // term ::= STRING_LITERAL
          {
            ACSLTerm RESULT = null;
            String l = (String) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLStringLiteral(l);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // term ::= IDENTIFIER
          {
            ACSLTerm RESULT = null;
            String i = (String) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            ACSLIdentifier identifier = new ACSLIdentifier(i, parser.getCurrentFunctionName());
            RESULT = identifier;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // term ::= term LBRACKET term RBRACKET
          {
            ACSLTerm RESULT = null;
            ACSLTerm t1 =
                (ACSLTerm)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 3))
                        .value;
            ACSLTerm t2 =
                (ACSLTerm)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RESULT = new ACSLArrayAccess(t1, t2);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // term ::= unary_op term
          {
            ACSLTerm RESULT = null;
            ACSLUnaryOperator op =
                (ACSLUnaryOperator)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLTerm t = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLUnaryTerm(t, op);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // term ::= SIZEOF LPAREN term RPAREN
          {
            ACSLTerm RESULT = null;
            ACSLTerm t =
                (ACSLTerm)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RESULT = new ACSLUnaryTerm(t, ACSLUnaryOperator.SIZEOF);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // term ::= LPAREN PRED_START TYPE RPAREN term
          {
            ACSLTerm RESULT = null;
            ACSLType tp =
                (ACSLType)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLTerm t = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLCast(tp, t);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // term ::= term arith_op term
          {
            ACSLTerm RESULT = null;
            ACSLTerm t1 =
                (ACSLTerm)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLBinaryOperator op =
                (ACSLBinaryOperator)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLTerm t2 = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLBinaryTerm(t1, t2, op);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // term ::= term bit_op term
          {
            ACSLTerm RESULT = null;
            ACSLTerm t1 =
                (ACSLTerm)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 2))
                        .value;
            ACSLBinaryOperator op =
                (ACSLBinaryOperator)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            ACSLTerm t2 = (ACSLTerm) ((java_cup.runtime.Symbol) CUP$ACSLParser$stack.peek()).value;
            RESULT = new ACSLBinaryTerm(t1, t2, op);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // term ::= LPAREN term RPAREN
          {
            ACSLTerm RESULT = null;
            ACSLTerm t =
                (ACSLTerm)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RESULT = t;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // term ::= OLD LPAREN term RPAREN
          {
            ACSLTerm RESULT = null;
            ACSLTerm t =
                (ACSLTerm)
                    ((java_cup.runtime.Symbol)
                            CUP$ACSLParser$stack.elementAt(CUP$ACSLParser$top - 1))
                        .value;
            RESULT = new TermAt(t, ACSLDefaultLabel.OLD);
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // term ::= RETVAL
          {
            ACSLTerm RESULT = null;
            RESULT = new ACSLResult(parser.getCurrentFunctionName());
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("term", 28, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // log_op ::= AND
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.AND;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("log_op", 31, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // log_op ::= OR
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.OR;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("log_op", 31, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // log_op ::= IMP
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.IMP;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("log_op", 31, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // log_op ::= EQV
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.EQV;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("log_op", 31, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // log_op ::= XOR
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.XOR;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("log_op", 31, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // asc_rel_op ::= LEQ
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.LEQ;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("asc_rel_op", 29, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // asc_rel_op ::= LT
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.LT;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("asc_rel_op", 29, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // desc_rel_op ::= GT
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.GT;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("desc_rel_op", 30, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // desc_rel_op ::= GEQ
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.GEQ;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("desc_rel_op", 30, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // arith_op ::= PLUS
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.PLUS;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("arith_op", 32, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // arith_op ::= MINUS
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.MINUS;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("arith_op", 32, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // arith_op ::= STAR
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.TIMES;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("arith_op", 32, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // arith_op ::= DIVIDE
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.DIVIDE;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("arith_op", 32, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // arith_op ::= MOD
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.MOD;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("arith_op", 32, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // arith_op ::= LSHIFT
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.LSHIFT;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("arith_op", 32, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // arith_op ::= RSHIFT
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.RSHIFT;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("arith_op", 32, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // bit_op ::= AMPERSAND
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.BAND;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("bit_op", 33, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // bit_op ::= BOR
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.BOR;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("bit_op", 33, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // bit_op ::= BIMP
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.BIMP;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("bit_op", 33, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // bit_op ::= BEQV
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.BEQV;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("bit_op", 33, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 106: // bit_op ::= BXOR
          {
            ACSLBinaryOperator RESULT = null;
            RESULT = ACSLBinaryOperator.BXOR;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("bit_op", 33, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 107: // unary_op ::= BNEG
          {
            ACSLUnaryOperator RESULT = null;
            RESULT = ACSLUnaryOperator.BNEG;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("unary_op", 34, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 108: // unary_op ::= PLUS
          {
            ACSLUnaryOperator RESULT = null;
            RESULT = ACSLUnaryOperator.PLUS;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("unary_op", 34, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 109: // unary_op ::= MINUS
          {
            ACSLUnaryOperator RESULT = null;
            RESULT = ACSLUnaryOperator.MINUS;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("unary_op", 34, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 110: // unary_op ::= STAR
          {
            ACSLUnaryOperator RESULT = null;
            RESULT = ACSLUnaryOperator.POINTER_DEREF;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("unary_op", 34, RESULT);
          }
          return CUP$ACSLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
        case 111: // unary_op ::= AMPERSAND
          {
            ACSLUnaryOperator RESULT = null;
            RESULT = ACSLUnaryOperator.ADDRESS_OF;
            CUP$ACSLParser$result = parser.getSymbolFactory().newSymbol("unary_op", 34, RESULT);
          }
          return CUP$ACSLParser$result;

          /* . . . . . .*/
        default:
          throw new Exception(
              "Invalid action number " + CUP$ACSLParser$act_num + "found in internal parse table");
      }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$ACSLParser$do_action(
        int CUP$ACSLParser$act_num,
        java_cup.runtime.lr_parser CUP$ACSLParser$parser,
        java.util.Stack CUP$ACSLParser$stack,
        int CUP$ACSLParser$top)
        throws java.lang.Exception {
      return CUP$ACSLParser$do_action_part00000000(
          CUP$ACSLParser$act_num, CUP$ACSLParser$parser, CUP$ACSLParser$stack, CUP$ACSLParser$top);
    }
  }
}
